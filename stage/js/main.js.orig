<<<<<<< HEAD
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {

        // define(factory);
        define(['jquery', 'underscore', 'backbone'], factory);

    } else {

        root['facetedsearch'] = factory();
    }
// }(this, function () {
}(this, function ($, _, Backbone) {

/**
 * almond 0.2.7 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        if (config.deps) {
            req(config.deps, config.callback);
        }
        return req;
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("../lib/almond/almond", function(){});

(function() {
  var __hasProp = {}.hasOwnProperty;

  define('hilib/functions/general',['require','jquery'],function(require) {
    var $;
    $ = require('jquery');
    return {
      closest: function(el, selector) {
        var matchesSelector;
        matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;
        while (el) {
          if (matchesSelector.bind(el)(selector)) {
            return el;
          } else {
            el = el.parentNode;
          }
        }
      },
      /*
      	Generates an ID that starts with a letter
      	
      	Example: "aBc12D34"
      
      	param Number length of the id
      	return String
      */

      generateID: function(length) {
        var chars, text;
        length = (length != null) && length > 0 ? length - 1 : 7;
        chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        text = chars.charAt(Math.floor(Math.random() * 52));
        while (length--) {
          text += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return text;
      },
      /*
      	Deepcopies arrays and object literals
      	
      	return Array or object
      */

      deepCopy: function(object) {
        var newEmpty;
        newEmpty = Array.isArray(object) ? [] : {};
        return $.extend(true, newEmpty, object);
      },
      timeoutWithReset: (function() {
        var timer;
        timer = null;
        return function(ms, cb, onResetFn) {
          if (timer != null) {
            if (onResetFn != null) {
              onResetFn();
            }
            clearTimeout(timer);
          }
          return timer = setTimeout((function() {
            timer = null;
            return cb();
          }), ms);
        };
      })(),
      /*
      	Highlight text between two nodes. 
      
      	Creates a span.hilite between two given nodes, surrounding the contents of the nodes
      
      	Example usage:
      	hl = Fn.highlighter
      		className: 'highlight' # optional
      		tagName: 'div' # optional
      
      	supEnter = (ev) -> hl.on
      		startNode: el.querySelector(#someid) # required
      		endNode: ev.currentTarget # required
      	supLeave = -> hl.off()
      	$(sup).hover supEnter, supLeave
      */

      highlighter: function(args) {
        var className, el, tagName;
        if (args == null) {
          args = {};
        }
        className = args.className, tagName = args.tagName;
        if (className == null) {
          className = 'hilite';
        }
        if (tagName == null) {
          tagName = 'span';
        }
        el = null;
        return {
          on: function(args) {
            var endNode, range, startNode;
            startNode = args.startNode, endNode = args.endNode;
            range = document.createRange();
            range.setStartAfter(startNode);
            range.setEndBefore(endNode);
            el = document.createElement(tagName);
            el.className = className;
            el.appendChild(range.extractContents());
            return range.insertNode(el);
          },
          off: function() {
            return $(el).replaceWith(function() {
              return $(this).contents();
            });
          }
        };
      },
      /*
      	Native alternative to jQuery's $.offset()
      
      	http://www.quirksmode.org/js/findpos.html
      */

      position: function(el, parent) {
        var left, top;
        left = 0;
        top = 0;
        while (el !== parent) {
          left += el.offsetLeft;
          top += el.offsetTop;
          el = el.offsetParent;
        }
        return {
          left: left,
          top: top
        };
      },
      boundingBox: function(el) {
        var box;
        box = $(el).offset();
        box.width = el.clientWidth;
        box.height = el.clientHeight;
        box.right = box.left + box.width;
        box.bottom = box.top + box.height;
        return box;
      },
      /*
      	Is child el a descendant of parent el?
      
      	http://stackoverflow.com/questions/2234979/how-to-check-in-javascript-if-one-element-is-a-child-of-another
      */

      isDescendant: function(parent, child) {
        var node;
        node = child.parentNode;
        while (node != null) {
          if (node === parent) {
            return true;
          }
          node = node.parentNode;
        }
        return false;
      },
      /*
      	Removes an item from an array
      */

      removeFromArray: function(arr, item) {
        var index;
        index = arr.indexOf(item);
        arr.splice(index, 1);
        return arr;
      },
      /* Escape a regular expression*/

      escapeRegExp: function(str) {
        return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      },
      /*
      	Flattens an object
      
      	songs:
      		mary:
      			had:
      				little: 'lamb'
      
      	becomes
      
      	songs:
      		mary.had.little: 'lamb'
      
      	Taken from: http://thedersen.com/projects/backbone-validation
      */

      flattenObject: function(obj, into, prefix) {
        var k, v;
        if (into == null) {
          into = {};
        }
        if (prefix == null) {
          prefix = '';
        }
        for (k in obj) {
          if (!__hasProp.call(obj, k)) continue;
          v = obj[k];
          if (_.isObject(v) && !_.isArray(v) && !_.isFunction(v) && !(v instanceof Backbone.Model) && !(v instanceof Backbone.Collection)) {
            this.flattenObject(v, into, prefix + k + '.');
          } else {
            into[prefix + k] = v;
          }
        }
        return into;
      },
      compareJSON: function(current, changed) {
        var attr, changes, value;
        changes = {};
        for (attr in current) {
          if (!__hasProp.call(current, attr)) continue;
          value = current[attr];
          if (!changed.hasOwnProperty(attr)) {
            changes[attr] = 'removed';
          }
        }
        for (attr in changed) {
          if (!__hasProp.call(changed, attr)) continue;
          value = changed[attr];
          if (current.hasOwnProperty(attr)) {
            if (_.isArray(value) || this.isObjectLiteral(value)) {
              if (!_.isEqual(current[attr], changed[attr])) {
                changes[attr] = changed[attr];
              }
            } else {
              if (current[attr] !== changed[attr]) {
                changes[attr] = changed[attr];
              }
            }
          } else {
            changes[attr] = 'added';
          }
        }
        return changes;
      },
      isObjectLiteral: function(obj) {
        var ObjProto;
        if ((obj == null) || typeof obj !== "object") {
          return false;
        }
        ObjProto = obj;
        while (Object.getPrototypeOf(ObjProto = Object.getPrototypeOf(ObjProto)) !== null) {
          0;
        }
        return Object.getPrototypeOf(obj) === ObjProto;
      },
      getScrollPercentage: function(el) {
        var left, scrolledLeft, scrolledTop, top, totalLeft, totalTop;
        scrolledTop = el.scrollTop;
        totalTop = el.scrollHeight - el.clientHeight;
        scrolledLeft = el.scrollLeft;
        totalLeft = el.scrollWidth - el.clientWidth;
        top = totalTop === 0 ? 0 : Math.floor((scrolledTop / totalTop) * 100);
        left = totalLeft === 0 ? 0 : Math.floor((scrolledLeft / totalLeft) * 100);
        return {
          top: top,
          left: left
        };
      },
      setScrollPercentage: function(el, percentages) {
        if (percentages.top < 5) {
          percentages.top = 0;
        }
        if (percentages.top > 95) {
          percentages.top = 100;
        }
        el.scrollTop = (el.scrollHeight - el.clientHeight) * percentages.top / 100;
        return el.scrollLeft = (el.scrollWidth - el.clientWidth) * percentages.left / 100;
      },
      checkCheckboxes: function(selector, checked, baseEl) {
        var cb, checkboxes, _i, _len, _results;
        if (selector == null) {
          selector = 'input[type="checkbox"]';
        }
        if (checked == null) {
          checked = true;
        }
        if (baseEl == null) {
          baseEl = document;
        }
        checkboxes = baseEl.querySelectorAll(selector);
        _results = [];
        for (_i = 0, _len = checkboxes.length; _i < _len; _i++) {
          cb = checkboxes[_i];
          _results.push(cb.checked = checked);
        }
        return _results;
      },
      setCursorToEnd: function(textEl, windowEl) {
        var range, sel, win;
        win = windowEl != null ? windowEl : window;
        if (windowEl == null) {
          windowEl = textEl;
        }
        windowEl.focus();
        range = document.createRange();
        range.selectNodeContents(textEl);
        range.collapse(false);
        sel = win.getSelection();
        if (sel != null) {
          sel.removeAllRanges();
          return sel.addRange(range);
        }
      },
      arraySum: function(arr) {
        if (arr.length === 0) {
          return 0;
        }
        return arr.reduce(function(prev, current) {
          return current + prev;
        });
      },
      getAspectRatio: function(originalWidth, originalHeight, boxWidth, boxHeight) {
        var heightRatio, widthRatio;
        widthRatio = boxWidth / originalWidth;
        heightRatio = boxHeight / originalHeight;
        return Math.min(widthRatio, heightRatio);
      },
      hasScrollBar: function(el) {
        return el.scrollHeight > el.clientHeight || el.scrollWidth > el.clientWidth;
      },
      hasXScrollBar: function(el) {
        return el.scrollWidth > el.clientWidth;
      },
      hasYScrollBar: function(el) {
        return el.scrollHeight > el.clientHeight;
      }
    };
  });

}).call(this);

(function() {
  define('hilib/functions/dom',['require'],function(require) {
    return function(el) {
      return {
        closest: function(selector) {
          var matchesSelector;
          matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;
          while (el) {
            if (matchesSelector.bind(el)(selector)) {
              return el;
            } else {
              el = el.parentNode;
            }
          }
        },
        prepend: function(childEl) {
          return el.insertBefore(childEl, el.firstChild);
        },
        /*
        		Native alternative to jQuery's $.offset()
        
        		http://www.quirksmode.org/js/findpos.html
        */

        position: function(parent) {
          var left, loopEl, top;
          if (parent == null) {
            parent = document.body;
          }
          left = 0;
          top = 0;
          loopEl = el;
          while (loopEl !== parent) {
            if (this.hasDescendant(parent)) {
              break;
            }
            left += loopEl.offsetLeft;
            top += loopEl.offsetTop;
            loopEl = loopEl.offsetParent;
          }
          return {
            left: left,
            top: top
          };
        },
        /*
        		Is child el a descendant of parent el?
        
        		http://stackoverflow.com/questions/2234979/how-to-check-in-javascript-if-one-element-is-a-child-of-another
        */

        hasDescendant: function(child) {
          var node;
          node = child.parentNode;
          while (node != null) {
            if (node === el) {
              return true;
            }
            node = node.parentNode;
          }
          return false;
        },
        boundingBox: function() {
          var box;
          box = this.position();
          box.width = el.clientWidth;
          box.height = el.clientHeight;
          box.right = box.left + box.width;
          box.bottom = box.top + box.height;
          return box;
        },
        insertAfter: function(newElement, referenceElement) {
          return referenceElement.parentNode.insertBefore(newElement, referenceElement.nextSibling);
        },
        highlightUntil: function(endNode, highlightClass) {
          if (highlightClass == null) {
            highlightClass = 'highlight';
          }
          return {
            on: function() {
              var currentNode, filter, range, treewalker,
                _this = this;
              range = document.createRange();
              range.setStartAfter(el);
              range.setEndBefore(endNode);
              filter = function(node) {
                var end, r, start;
                r = document.createRange();
                r.selectNode(node);
                start = r.compareBoundaryPoints(Range.START_TO_START, range);
                end = r.compareBoundaryPoints(Range.END_TO_START, range);
                if (start === -1 || end === 1) {
                  return NodeFilter.FILTER_SKIP;
                } else {
                  return NodeFilter.FILTER_ACCEPT;
                }
              };
              filter.acceptNode = filter;
              treewalker = document.createTreeWalker(range.commonAncestorContainer, NodeFilter.SHOW_ELEMENT, filter, false);
              while (treewalker.nextNode()) {
                currentNode = treewalker.currentNode;
                if ((' ' + currentNode.className + ' ').indexOf(' text ') > -1) {
                  currentNode.className = currentNode.className + ' ' + highlightClass;
                }
              }
              return this;
            },
            off: function() {
              var classNames, _i, _len, _ref, _results;
              _ref = document.querySelectorAll('.' + highlightClass);
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                el = _ref[_i];
                classNames = ' ' + el.className + ' ';
                classNames = classNames.replace(' ' + highlightClass + ' ', '');
                _results.push(el.className = classNames.replace(/^\s+|\s+$/g, ''));
              }
              return _results;
            }
          };
        }
      };
    };
  });

}).call(this);

(function() {
  define('hilib/mixins/pubsub',['require','backbone'],function(require) {
    var Backbone;
    Backbone = require('backbone');
    return {
      subscribe: function(ev, done) {
        return this.listenTo(Backbone, ev, done);
      },
      publish: function() {
        return Backbone.trigger.apply(Backbone, arguments);
      }
    };
  });

}).call(this);

(function() {
  define('config',['require'],function(require) {
    return {
      baseUrl: '',
      searchPath: '',
      search: true,
      token: null,
      queryOptions: {},
      facetNameMap: {}
    };
  });

}).call(this);

(function() {
  define('hilib/functions/string',['require','jquery'],function(require) {
    var $;
    $ = require('jquery');
    return {
      ucfirst: function(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
      },
      /*
      	Slugify a string
      */

      slugify: function(str) {
        var from, index, strlen, to;
        from = "àáäâèéëêìíïîòóöôùúüûñç·/_:;";
        to = "aaaaeeeeiiiioooouuuunc-----";
        str = str.trim().toLowerCase();
        strlen = str.length;
        while (strlen--) {
          index = from.indexOf(str[strlen]);
          if (index !== -1) {
            str = str.substr(0, strlen) + to[index] + str.substr(strlen + 1);
          }
        }
        return str.replace(/[^a-z0-9 -]/g, '').replace(/\s+|\-+/g, '-').replace(/^\-+|\-+$/g, '');
      },
      /*
      	Strips the tags from a string
      	
      	Example: "This is a <b>string</b>." => "This is a string."
      	
      	return String
      */

      stripTags: function(str) {
        return $('<span />').html(str).text();
      },
      /*
      	Removes non numbers from a string
      	
      	Example: "Count the 12 monkeys." => "12"
      	
      	return String
      */

      onlyNumbers: function(str) {
        return str.replace(/[^\d.]/g, '');
      },
      hashCode: function(str) {
        var c, chr, hash, i, _i, _len;
        if (str.length === 0) {
          return false;
        }
        hash = 0;
        for (i = _i = 0, _len = str.length; _i < _len; i = ++_i) {
          chr = str[i];
          c = str.charCodeAt(i);
          hash = ((hash << 5) - hash) + c;
          hash = hash & hash;
        }
        return hash;
      },
      insertAt: function(str, needle, index) {
        return str.slice(0, index) + needle + str.slice(index);
      }
    };
  });

}).call(this);

/* UP FOR REMOVAL*/


(function() {
  define('hilib/managers/pubsub',['require','backbone'],function(require) {
    var Backbone;
    Backbone = require('backbone');
    return {
      subscribe: function(ev, cb) {
        return this.listenTo(Backbone, ev, cb);
      },
      publish: function() {
        return Backbone.trigger.apply(Backbone, arguments);
      }
    };
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/base',['require','backbone','hilib/managers/pubsub'],function(require) {
    var Backbone, Base, Pubsub, _ref;
    Backbone = require('backbone');
    Pubsub = require('hilib/managers/pubsub');
    return Base = (function(_super) {
      __extends(Base, _super);

      function Base() {
        _ref = Base.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Base.prototype.initialize = function() {
        return _.extend(this, Pubsub);
      };

      return Base;

    })(Backbone.Model);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/facet',['require','config','models/base'],function(require) {
    var Facet, Models, config, _ref;
    config = require('config');
    Models = {
      Base: require('models/base')
    };
    return Facet = (function(_super) {
      __extends(Facet, _super);

      function Facet() {
        _ref = Facet.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Facet.prototype.idAttribute = 'name';

      Facet.prototype.parse = function(attrs) {
        if (config.facetNameMap.hasOwnProperty(attrs.name)) {
          attrs.title = config.facetNameMap[attrs.name];
        } else {
          config.facetNameMap[attrs.name] = attrs.title;
        }
        return attrs;
      };

      return Facet;

    })(Backbone.Model);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/boolean',['require','models/facet'],function(require) {
    var BooleanFacet, Models, _ref;
    Models = {
      Facet: require('models/facet')
    };
    return BooleanFacet = (function(_super) {
      __extends(BooleanFacet, _super);

      function BooleanFacet() {
        _ref = BooleanFacet.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      BooleanFacet.prototype.set = function(attrs, options) {
        if (attrs === 'options') {
          options = this.parseOptions(options);
        } else if (attrs.options != null) {
          attrs.options = this.parseOptions(attrs.options);
        }
        return BooleanFacet.__super__.set.call(this, attrs, options);
      };

      BooleanFacet.prototype.parseOptions = function(options) {
        var _ref1;
        options = (_ref1 = this.get('options')) != null ? _ref1 : options;
        if (options.length === 1) {
          options.push({
            name: (!JSON.parse(options[0].name)).toString(),
            count: 0
          });
        }
        return options;
      };

      return BooleanFacet;

    })(Models.Facet);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('hilib/views/base',['require','backbone','hilib/mixins/pubsub'],function(require) {
    var Backbone, BaseView, Pubsub, _ref;
    Backbone = require('backbone');
    Pubsub = require('hilib/mixins/pubsub');
    return BaseView = (function(_super) {
      __extends(BaseView, _super);

      function BaseView() {
        _ref = BaseView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      BaseView.prototype.initialize = function() {
        _.extend(this, Pubsub);
        return this.subviews = {};
      };

      BaseView.prototype.destroy = function() {
        var name, subview, _ref1;
        _ref1 = this.subviews;
        for (name in _ref1) {
          subview = _ref1[name];
          subview.destroy();
        }
        return this.remove();
      };

      return BaseView;

    })(Backbone.View);
  });

}).call(this);

(function(e){if("function"==typeof bootstrap)bootstrap("jade",e);else if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define('jade',e);else if("undefined"!=typeof ses){if(!ses.ok())return;ses.makeJade=e}else"undefined"!=typeof window?window.jade=e():global.jade=e()})(function(){var define,ses,bootstrap,module,exports;
return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

/*!
 * Jade - runtime
 * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>
 * MIT Licensed
 */

/**
 * Lame Array.isArray() polyfill for now.
 */

if (!Array.isArray) {
  Array.isArray = function(arr){
    return '[object Array]' == Object.prototype.toString.call(arr);
  };
}

/**
 * Lame Object.keys() polyfill for now.
 */

if (!Object.keys) {
  Object.keys = function(obj){
    var arr = [];
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        arr.push(key);
      }
    }
    return arr;
  }
}

/**
 * Merge two attribute objects giving precedence
 * to values in object `b`. Classes are special-cased
 * allowing for arrays and merging/joining appropriately
 * resulting in a string.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api private
 */

exports.merge = function merge(a, b) {
  var ac = a['class'];
  var bc = b['class'];

  if (ac || bc) {
    ac = ac || [];
    bc = bc || [];
    if (!Array.isArray(ac)) ac = [ac];
    if (!Array.isArray(bc)) bc = [bc];
    a['class'] = ac.concat(bc).filter(nulls);
  }

  for (var key in b) {
    if (key != 'class') {
      a[key] = b[key];
    }
  }

  return a;
};

/**
 * Filter null `val`s.
 *
 * @param {*} val
 * @return {Boolean}
 * @api private
 */

function nulls(val) {
  return val != null && val !== '';
}

/**
 * join array as classes.
 *
 * @param {*} val
 * @return {String}
 * @api private
 */

function joinClasses(val) {
  return Array.isArray(val) ? val.map(joinClasses).filter(nulls).join(' ') : val;
}

/**
 * Render the given attributes object.
 *
 * @param {Object} obj
 * @param {Object} escaped
 * @return {String}
 * @api private
 */

exports.attrs = function attrs(obj, escaped){
  var buf = []
    , terse = obj.terse;

  delete obj.terse;
  var keys = Object.keys(obj)
    , len = keys.length;

  if (len) {
    buf.push('');
    for (var i = 0; i < len; ++i) {
      var key = keys[i]
        , val = obj[key];

      if ('boolean' == typeof val || null == val) {
        if (val) {
          terse
            ? buf.push(key)
            : buf.push(key + '="' + key + '"');
        }
      } else if (0 == key.indexOf('data') && 'string' != typeof val) {
        buf.push(key + "='" + JSON.stringify(val) + "'");
      } else if ('class' == key) {
        if (escaped && escaped[key]){
          if (val = exports.escape(joinClasses(val))) {
            buf.push(key + '="' + val + '"');
          }
        } else {
          if (val = joinClasses(val)) {
            buf.push(key + '="' + val + '"');
          }
        }
      } else if (escaped && escaped[key]) {
        buf.push(key + '="' + exports.escape(val) + '"');
      } else {
        buf.push(key + '="' + val + '"');
      }
    }
  }

  return buf.join(' ');
};

/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

exports.escape = function escape(html){
  return String(html)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};

/**
 * Re-throw the given `err` in context to the
 * the jade in `filename` at the given `lineno`.
 *
 * @param {Error} err
 * @param {String} filename
 * @param {String} lineno
 * @api private
 */

exports.rethrow = function rethrow(err, filename, lineno, str){
  if (!(err instanceof Error)) throw err;
  if ((typeof window != 'undefined' || !filename) && !str) {
    err.message += ' on line ' + lineno;
    throw err;
  }
  try {
    str =  str || require('fs').readFileSync(filename, 'utf8')
  } catch (ex) {
    rethrow(err, null, lineno)
  }
  var context = 3
    , lines = str.split('\n')
    , start = Math.max(lineno - context, 0)
    , end = Math.min(lines.length, lineno + context);

  // Error context
  var context = lines.slice(start, end).map(function(line, i){
    var curr = i + start + 1;
    return (curr == lineno ? '  > ' : '    ')
      + curr
      + '| '
      + line;
  }).join('\n');

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'Jade') + ':' + lineno
    + '\n' + context + '\n\n' + err.message;
  throw err;
};

},{"fs":2}],2:[function(require,module,exports){
// nothing to see here... no file methods for the browser

},{}]},{},[1])(1)
});
;
define('tpls',['jade'], function(jade) { if(jade && jade['runtime'] !== undefined) { jade = jade.runtime; }

this["JST"] = this["JST"] || {};

this["JST"]["faceted-search/facets/boolean.body"] = function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),options = locals_.options,ucfirst = locals_.ucfirst;buf.push("<ul>");
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var option = $$obj[$index];

buf.push("<li><div class=\"row span6\"><div class=\"cell span5\"><i" + (jade.attrs({ 'data-value':(option.name), "class": [(option.checked?'fa fa-check-square-o':'fa fa-square-o')] }, {"data-value":true,"class":true})) + "></i><label" + (jade.attrs({ 'data-value':(option.name) }, {"data-value":true})) + ">" + (jade.escape(null == (jade.interp = ucfirst(option.name)) ? "" : jade.interp)) + "</label></div><div class=\"cell span1 alignright\"><div class=\"count\">" + (jade.escape(null == (jade.interp = option.count) ? "" : jade.interp)) + "</div></div></div></li>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var option = $$obj[$index];

buf.push("<li><div class=\"row span6\"><div class=\"cell span5\"><i" + (jade.attrs({ 'data-value':(option.name), "class": [(option.checked?'fa fa-check-square-o':'fa fa-square-o')] }, {"data-value":true,"class":true})) + "></i><label" + (jade.attrs({ 'data-value':(option.name) }, {"data-value":true})) + ">" + (jade.escape(null == (jade.interp = ucfirst(option.name)) ? "" : jade.interp)) + "</label></div><div class=\"cell span1 alignright\"><div class=\"count\">" + (jade.escape(null == (jade.interp = option.count) ? "" : jade.interp)) + "</div></div></div></li>");
    }

  }
}).call(this);

buf.push("</ul>");;return buf.join("");
};

this["JST"]["faceted-search/facets/date"] = function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),name = locals_.name,title = locals_.title,options = locals_.options;buf.push("<header><h3" + (jade.attrs({ 'data-name':(name) }, {"data-name":true})) + ">" + (jade.escape(null == (jade.interp = title) ? "" : jade.interp)) + "</h3></header><div class=\"body\"><label>From:</label><select>");
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var option = $$obj[$index];

buf.push("<option>" + (jade.escape(null == (jade.interp = option) ? "" : jade.interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var option = $$obj[$index];

buf.push("<option>" + (jade.escape(null == (jade.interp = option) ? "" : jade.interp)) + "</option>");
    }

  }
}).call(this);

buf.push("</select><label>To:</label><select>");
// iterate options.reverse()
;(function(){
  var $$obj = options.reverse();
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var option = $$obj[$index];

buf.push("<option>" + (jade.escape(null == (jade.interp = option) ? "" : jade.interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var option = $$obj[$index];

buf.push("<option>" + (jade.escape(null == (jade.interp = option) ? "" : jade.interp)) + "</option>");
    }

  }
}).call(this);

buf.push("</select></div>");;return buf.join("");
};

this["JST"]["faceted-search/facets/list.body"] = function anonymous(locals) {
var buf = [];
buf.push("<ul></ul>");;return buf.join("");
};

this["JST"]["faceted-search/facets/list.menu"] = function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),selectAll = locals_.selectAll;buf.push("<input" + (jade.attrs({ 'type':("checkbox"), 'name':("all"), 'style':(selectAll?'visibility:visible':'visibility:hidden') }, {"type":true,"name":true,"style":true})) + "/><input type=\"text\" name=\"filter\"/><small class=\"optioncount\"></small><div class=\"orderby\"><i class=\"alpha fa fa-sort-alpha-asc\"></i><i class=\"amount active fa fa-sort-amount-desc\"></i></div>");;return buf.join("");
};

this["JST"]["faceted-search/facets/list.option"] = function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),option = locals_.option;buf.push("<li" + (jade.attrs({ 'data-count':(option.get('count')) }, {"data-count":true})) + "><i" + (jade.attrs({ 'data-value':(option.id), "class": [(option.get('checked')?'fa fa-check-square-o':'fa fa-square-o')] }, {"data-value":true,"class":true})) + "></i><label" + (jade.attrs({ 'data-value':(option.id) }, {"data-value":true})) + ">" + (null == (jade.interp = option.id === ':empty' ? '<em>(empty)</em>' : option.id) ? "" : jade.interp) + "</label><div class=\"count\">" + (jade.escape(null == (jade.interp = option.get('count') === 0 ? option.get('total') : option.get('count')) ? "" : jade.interp)) + "</div></li>");;return buf.join("");
};

this["JST"]["faceted-search/facets/list.options"] = function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),options = locals_.options,generateID = locals_.generateID;buf.push("<ul>");
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {

    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
      var option = $$obj[index];

randomId = generateID();
if ( index < 50)
{
buf.push("<li><div" + (jade.attrs({ 'data-count':(option.get('count')), "class": [('row'),('span6')] }, {"data-count":true})) + "><div class=\"cell span5\"><input" + (jade.attrs({ 'id':(randomId), 'name':(randomId), 'type':("checkbox"), 'data-value':(option.id), 'checked':(option.get('checked')?true:false) }, {"id":true,"name":true,"type":true,"data-value":true,"checked":true})) + "/><label" + (jade.attrs({ 'for':(randomId) }, {"for":true})) + ">" + (null == (jade.interp = option.id === ':empty' ? '<em>(empty)</em>' : option.id) ? "" : jade.interp) + "</label></div><div class=\"cell span1 alignright\"><div class=\"count\">" + (jade.escape(null == (jade.interp = option.get('count') === 0 ? option.get('total') : option.get('count')) ? "" : jade.interp)) + "</div></div></div></li>");
}
    }

  } else {
    var $$l = 0;
    for (var index in $$obj) {
      $$l++;      var option = $$obj[index];

randomId = generateID();
if ( index < 50)
{
buf.push("<li><div" + (jade.attrs({ 'data-count':(option.get('count')), "class": [('row'),('span6')] }, {"data-count":true})) + "><div class=\"cell span5\"><input" + (jade.attrs({ 'id':(randomId), 'name':(randomId), 'type':("checkbox"), 'data-value':(option.id), 'checked':(option.get('checked')?true:false) }, {"id":true,"name":true,"type":true,"data-value":true,"checked":true})) + "/><label" + (jade.attrs({ 'for':(randomId) }, {"for":true})) + ">" + (null == (jade.interp = option.id === ':empty' ? '<em>(empty)</em>' : option.id) ? "" : jade.interp) + "</label></div><div class=\"cell span1 alignright\"><div class=\"count\">" + (jade.escape(null == (jade.interp = option.get('count') === 0 ? option.get('total') : option.get('count')) ? "" : jade.interp)) + "</div></div></div></li>");
}
    }

  }
}).call(this);

buf.push("</ul>");;return buf.join("");
};

this["JST"]["faceted-search/facets/main"] = function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),name = locals_.name,title = locals_.title;buf.push("<div class=\"placeholder pad4\"><header><h3" + (jade.attrs({ 'data-name':(name) }, {"data-name":true})) + ">" + (jade.escape(null == (jade.interp = title) ? "" : jade.interp)) + "</h3><i class=\"openclose fa fa-plus-square-o\"></i><div class=\"options\"></div></header><div class=\"body\"></div></div>");;return buf.join("");
};

this["JST"]["faceted-search/facets/search.body"] = function anonymous(locals) {
var buf = [];
buf.push("<div class=\"row span4 align middle\"><div class=\"cell span3\"><div class=\"padr4\"><input type=\"text\" name=\"search\"/></div></div><div class=\"cell span1\"><button class=\"search\">Search</button></div></div>");;return buf.join("");
};

this["JST"]["faceted-search/facets/search.menu"] = function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),model = locals_.model;buf.push("<div class=\"row span2 align middle\"><div class=\"cell span1 casesensitive\"><input id=\"cb_casesensitive\" type=\"checkbox\" name=\"cb_casesensitive\" data-attr=\"caseSensitive\"/><label for=\"cb_casesensitive\">Match case</label></div><div class=\"cell span1 fuzzy\"><input id=\"cb_fuzzy\" type=\"checkbox\" name=\"cb_fuzzy\" data-attr=\"fuzzy\"/><label for=\"cb_fuzzy\">Fuzzy</label></div></div>");
if ( model.has('searchInAnnotations') || model.has('searchInTranscriptions'))
{
buf.push("<h4>Search</h4><ul class=\"searchins\">");
if ( model.has('searchInTranscriptions'))
{
buf.push("<li class=\"searchin\"><input" + (jade.attrs({ 'id':("cb_searchin_transcriptions"), 'type':("checkbox"), 'data-attr':("searchInTranscriptions"), 'checked':(model.get('searchInTranscriptions')) }, {"id":true,"type":true,"data-attr":true,"checked":true})) + "/><label for=\"cb_searchin_transcriptions\">Transcriptions</label>");
if ( model.has('textLayers'))
{
buf.push("<ul class=\"textlayers\">");
// iterate model.get('textLayers')
;(function(){
  var $$obj = model.get('textLayers');
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var textLayer = $$obj[$index];

buf.push("<li class=\"textlayer\"><input" + (jade.attrs({ 'id':('cb_textlayer'+textLayer), 'type':("checkbox"), 'data-attr-array':("textLayers"), 'data-value':(textLayer), 'checked':(true) }, {"id":true,"type":true,"data-attr-array":true,"data-value":true,"checked":true})) + "/><label" + (jade.attrs({ 'for':('cb_textlayer'+textLayer) }, {"for":true})) + ">" + (jade.escape(null == (jade.interp = textLayer) ? "" : jade.interp)) + "</label></li>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var textLayer = $$obj[$index];

buf.push("<li class=\"textlayer\"><input" + (jade.attrs({ 'id':('cb_textlayer'+textLayer), 'type':("checkbox"), 'data-attr-array':("textLayers"), 'data-value':(textLayer), 'checked':(true) }, {"id":true,"type":true,"data-attr-array":true,"data-value":true,"checked":true})) + "/><label" + (jade.attrs({ 'for':('cb_textlayer'+textLayer) }, {"for":true})) + ">" + (jade.escape(null == (jade.interp = textLayer) ? "" : jade.interp)) + "</label></li>");
    }

  }
}).call(this);

buf.push("</ul>");
}
buf.push("</li>");
}
if ( model.has('searchInAnnotations'))
{
buf.push("<li class=\"searchin\"><input" + (jade.attrs({ 'id':("cb_searchin_annotations"), 'type':("checkbox"), 'data-attr':("searchInAnnotations"), 'checked':(model.get('searchInAnnotations')) }, {"id":true,"type":true,"data-attr":true,"checked":true})) + "/><label for=\"cb_searchin_annotations\">Annotations</label></li>");
}
buf.push("</ul>");
};return buf.join("");
};

this["JST"]["faceted-search/main"] = function anonymous(locals) {
var buf = [];
buf.push("<div class=\"overlay\"><div><i class=\"fa fa-spinner fa-spin fa-2x\"></i></div></div><div class=\"faceted-search\"><i class=\"fa fa-compress\"></i><form><div class=\"search-placeholder\"></div><div class=\"facets\"><div class=\"loader\"><h4>Loading facets...</h4><br/><i class=\"fa fa-spinner fa-spin fa-2x\"></i></div></div></form></div>");;return buf.join("");
};

return this["JST"];

});
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/facets/main',['require','hilib/views/base','tpls'],function(require) {
    var Facet, Views, tpls, _ref;
    Views = {
      Base: require('hilib/views/base')
    };
    tpls = require('tpls');
    return Facet = (function(_super) {
      __extends(Facet, _super);

      function Facet() {
        _ref = Facet.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Facet.prototype.initialize = function() {
        return Facet.__super__.initialize.apply(this, arguments);
      };

      Facet.prototype.render = function() {
        var rtpl;
        rtpl = tpls['faceted-search/facets/main'](this.model.attributes);
        this.$el.html(rtpl);
        return this;
      };

      Facet.prototype.events = function() {
        return {
          'click h3': 'toggleBody',
          'click header i.openclose': 'toggleMenu'
        };
      };

      Facet.prototype.toggleMenu = function(ev) {
        var $button;
        $button = $(ev.currentTarget);
        $button.toggleClass('fa-plus-square-o');
        $button.toggleClass('fa-minus-square-o');
        this.$('header .options').slideToggle(150);
        return this.$('header .options input[name="filter"]').focus();
      };

      Facet.prototype.hideMenu = function() {
        var $button;
        $button = $('header i.fa');
        $button.addClass('fa-plus-square-o');
        $button.removeClass('fa-minus-square-o');
        return this.$('header .options').slideUp(150);
      };

      Facet.prototype.toggleBody = function(ev) {
        var func;
        func = this.$('.body').is(':visible') ? this.hideBody : this.showBody;
        if (_.isFunction(ev)) {
          return func.call(this, ev);
        } else {
          return func.call(this);
        }
      };

      Facet.prototype.hideBody = function(done) {
        var _this = this;
        this.hideMenu();
        return this.$('.body').slideUp(100, function() {
          if (done != null) {
            done();
          }
          return _this.$('header i.fa').fadeOut(100);
        });
      };

      Facet.prototype.showBody = function(done) {
        var _this = this;
        return this.$('.body').slideDown(100, function() {
          if (done != null) {
            done();
          }
          return _this.$('header i.fa').fadeIn(100);
        });
      };

      Facet.prototype.update = function(newOptions) {};

      return Facet;

    })(Views.Base);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/facets/boolean',['require','hilib/functions/string','models/boolean','views/facets/main','tpls'],function(require) {
    var BooleanFacet, Models, StringFn, Views, tpls, _ref;
    StringFn = require('hilib/functions/string');
    Models = {
      Boolean: require('models/boolean')
    };
    Views = {
      Facet: require('views/facets/main')
    };
    tpls = require('tpls');
    return BooleanFacet = (function(_super) {
      __extends(BooleanFacet, _super);

      function BooleanFacet() {
        _ref = BooleanFacet.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      BooleanFacet.prototype.className = 'facet boolean';

      BooleanFacet.prototype.events = function() {
        return _.extend({}, BooleanFacet.__super__.events.apply(this, arguments), {
          'click i': 'checkChanged',
          'click label': 'checkChanged'
        });
      };

      BooleanFacet.prototype.checkChanged = function(ev) {
        var $target, option, value, _i, _len, _ref1;
        $target = ev.currentTarget.tagName === 'LABEL' ? this.$('i[data-value="' + ev.currentTarget.getAttribute('data-value') + '"]') : $(ev.currentTarget);
        $target.toggleClass('fa-square-o');
        $target.toggleClass('fa-check-square-o');
        value = $target.attr('data-value');
        _ref1 = this.model.get('options');
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          option = _ref1[_i];
          if (option.name === value) {
            option.checked = $target.hasClass('fa-check-square-o');
          }
        }
        return this.trigger('change', {
          facetValue: {
            name: this.model.get('name'),
            values: _.map(this.$('i.fa-check-square-o'), function(cb) {
              return cb.getAttribute('data-value');
            })
          }
        });
      };

      BooleanFacet.prototype.initialize = function(options) {
        BooleanFacet.__super__.initialize.apply(this, arguments);
        this.model = new Models.Boolean(options.attrs, {
          parse: true
        });
        this.listenTo(this.model, 'change:options', this.render);
        return this.render();
      };

      BooleanFacet.prototype.render = function() {
        var rtpl;
        BooleanFacet.__super__.render.apply(this, arguments);
        rtpl = tpls['faceted-search/facets/boolean.body'](_.extend(this.model.attributes, {
          ucfirst: StringFn.ucfirst
        }));
        this.$('.body').html(rtpl);
        this.$('header i.fa').remove();
        return this;
      };

      BooleanFacet.prototype.update = function(newOptions) {
        return this.model.set('options', newOptions);
      };

      BooleanFacet.prototype.reset = function() {
        return this.render();
      };

      return BooleanFacet;

    })(Views.Facet);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/date',['require','models/facet'],function(require) {
    var DateFacet, Models, _ref;
    Models = {
      Facet: require('models/facet')
    };
    return DateFacet = (function(_super) {
      __extends(DateFacet, _super);

      function DateFacet() {
        _ref = DateFacet.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DateFacet.prototype.parse = function(attrs) {
        attrs.options = _.map(_.pluck(attrs.options, 'name'), function(option) {
          return option.substr(0, 4);
        });
        attrs.options = _.unique(attrs.options);
        attrs.options.sort();
        return attrs;
      };

      return DateFacet;

    })(Models.Facet);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/facets/date',['require','hilib/functions/string','models/date','views/facets/main','tpls'],function(require) {
    var DateFacet, Models, StringFn, Views, tpls, _ref;
    StringFn = require('hilib/functions/string');
    Models = {
      Date: require('models/date')
    };
    Views = {
      Facet: require('views/facets/main')
    };
    tpls = require('tpls');
    return DateFacet = (function(_super) {
      __extends(DateFacet, _super);

      function DateFacet() {
        _ref = DateFacet.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DateFacet.prototype.className = 'facet date';

      DateFacet.prototype.initialize = function(options) {
        DateFacet.__super__.initialize.apply(this, arguments);
        this.model = new Models.Date(options.attrs, {
          parse: true
        });
        this.listenTo(this.model, 'change:options', this.render);
        return this.render();
      };

      DateFacet.prototype.render = function() {
        var rtpl;
        DateFacet.__super__.render.apply(this, arguments);
        rtpl = tpls['faceted-search/facets/date'](_.extend(this.model.attributes, {
          ucfirst: StringFn.ucfirst
        }));
        this.$('.placeholder').html(rtpl);
        return this;
      };

      DateFacet.prototype.update = function(newOptions) {};

      DateFacet.prototype.reset = function() {};

      return DateFacet;

    })(Views.Facet);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/list',['require','models/facet'],function(require) {
    var List, Models, _ref;
    Models = {
      Facet: require('models/facet')
    };
    return List = (function(_super) {
      __extends(List, _super);

      function List() {
        _ref = List.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return List;

    })(Models.Facet);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/list.option',['require','models/base'],function(require) {
    var ListItem, Models, _ref;
    Models = {
      Base: require('models/base')
    };
    return ListItem = (function(_super) {
      __extends(ListItem, _super);

      function ListItem() {
        _ref = ListItem.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ListItem.prototype.idAttribute = 'name';

      ListItem.prototype.defaults = function() {
        return {
          name: '',
          count: 0,
          total: 0,
          checked: false
        };
      };

      ListItem.prototype.parse = function(attrs) {
        attrs.total = attrs.count;
        return attrs;
      };

      return ListItem;

    })(Models.Base);
  });

}).call(this);

(function() {
  define('collections/base',['require','backbone'],function(require) {
    var Backbone;
    Backbone = require('backbone');
    return Backbone.Collection;
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('collections/list.options',['require','models/list.option','collections/base'],function(require) {
    var Collections, ListItems, Models, _ref;
    Models = {
      Option: require('models/list.option')
    };
    Collections = {
      Base: require('collections/base')
    };
    return ListItems = (function(_super) {
      __extends(ListItems, _super);

      function ListItems() {
        _ref = ListItems.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ListItems.prototype.model = Models.Option;

      ListItems.prototype.strategies = {
        alpha_asc: function(model) {
          return model.get('name');
        },
        alpha_desc: function(model) {
          return String.fromCharCode.apply(String, _.map(model.get('name').split(''), function(c) {
            return 0xffff - c.charCodeAt();
          }));
        },
        amount_asc: function(model) {
          return +model.get('count');
        },
        amount_desc: function(model) {
          return -1 * +model.get('count');
        }
      };

      ListItems.prototype.orderBy = function(strategy) {
        this.comparator = this.strategies[strategy];
        return this.sort();
      };

      ListItems.prototype.initialize = function() {
        return this.comparator = this.strategies.amount_desc;
      };

      ListItems.prototype.revert = function() {
        var _this = this;
        this.each(function(option) {
          return option.set('checked', false, {
            silent: true
          });
        });
        return this.trigger('change');
      };

      ListItems.prototype.updateOptions = function(newOptions) {
        var _this = this;
        if (newOptions == null) {
          newOptions = [];
        }
        this.each(function(option) {
          return option.set('count', 0, {
            silent: true
          });
        });
        _.each(newOptions, function(newOption) {
          var opt;
          opt = _this.get(newOption.name);
          if (opt != null) {
            return opt.set('count', newOption.count, {
              silent: true
            });
          } else {
            opt = new Models.Option(newOption);
            return _this.add(opt);
          }
        });
        return this.sort();
      };

      return ListItems;

    })(Collections.Base);
  });

}).call(this);

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/facets/list.options',['require','hilib/functions/general','hilib/views/base','models/list','tpls'],function(require) {
    var Fn, ListFacetOptions, Models, Views, tpls, _ref;
    Fn = require('hilib/functions/general');
    Views = {
      Base: require('hilib/views/base')
    };
    Models = {
      List: require('models/list')
    };
    tpls = require('tpls');
    return ListFacetOptions = (function(_super) {
      __extends(ListFacetOptions, _super);

      function ListFacetOptions() {
        this.triggerChange = __bind(this.triggerChange, this);
        _ref = ListFacetOptions.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ListFacetOptions.prototype.className = 'container';

      ListFacetOptions.prototype.events = function() {
        return {
          'click i': 'checkChanged',
          'click label': 'checkChanged',
          'scroll': 'onScroll'
        };
      };

      ListFacetOptions.prototype.onScroll = function(ev) {
        var target, topPerc;
        target = ev.currentTarget;
        topPerc = target.scrollTop / target.scrollHeight;
        if (topPerc > (this.showing / 2) / this.collection.length && this.showing < this.collection.length) {
          this.showing += this.showingIncrement;
          if (this.showing > this.collection.length) {
            this.showing = this.collection.length;
          }
          return this.appendOptions();
        }
      };

      ListFacetOptions.prototype.checkChanged = function(ev) {
        var $target, id,
          _this = this;
        $target = ev.currentTarget.tagName === 'LABEL' ? this.$('i[data-value="' + ev.currentTarget.getAttribute('data-value') + '"]') : $(ev.currentTarget);
        $target.toggleClass('fa-square-o');
        $target.toggleClass('fa-check-square-o');
        id = $target.attr('data-value');
        this.collection.get(id).set('checked', $target.hasClass('fa-check-square-o'));
        if (this.$('i.fa-check-square-o').length === 0) {
          return triggerChange();
        } else {
          return Fn.timeoutWithReset(1000, function() {
            return _this.triggerChange();
          });
        }
      };

      ListFacetOptions.prototype.triggerChange = function() {
        return this.trigger('change', {
          facetValue: {
            name: this.options.facetName,
            values: _.map(this.$('i.fa-check-square-o'), function(cb) {
              return cb.getAttribute('data-value');
            })
          }
        });
      };

      ListFacetOptions.prototype.initialize = function() {
        var _this = this;
        ListFacetOptions.__super__.initialize.apply(this, arguments);
        this.showing = null;
        this.showingIncrement = 50;
        this.filtered_items = this.collection.models;
        this.listenTo(this.collection, 'sort', function() {
          _this.filtered_items = _this.collection.models;
          return _this.render();
        });
        return this.render();
      };

      ListFacetOptions.prototype.render = function() {
        var ul;
        this.showing = 50;
        ul = document.createElement('ul');
        ul.style.height = (this.filtered_items.length * 15) + 'px';
        this.el.innerHTML = '';
        this.el.appendChild(ul);
        this.appendOptions();
        return this;
      };

      ListFacetOptions.prototype.renderAll = function() {
        this.render();
        return this.appendAllOptions();
      };

      ListFacetOptions.prototype.appendOptions = function() {
        var option, tpl, _i, _len, _ref1;
        tpl = '';
        _ref1 = this.filtered_items.slice(this.showing - this.showingIncrement, +this.showing + 1 || 9e9);
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          option = _ref1[_i];
          tpl += tpls['faceted-search/facets/list.option']({
            option: option
          });
        }
        return this.$('ul').append(tpl);
      };

      ListFacetOptions.prototype.appendAllOptions = function() {
        var option, tpl, _i, _len, _ref1;
        tpl = '';
        _ref1 = this.filtered_items.slice(this.showing);
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          option = _ref1[_i];
          tpl += tpls['faceted-search/facets/list.option']({
            option: option
          });
        }
        return this.$('ul').append(tpl);
      };

      /*
      		Called by parent (ListFacet) when user types in the search input
      */


      ListFacetOptions.prototype.filterOptions = function(value) {
        var re;
        re = new RegExp(value, 'i');
        this.filtered_items = this.collection.filter(function(item) {
          return re.test(item.id);
        });
        if (this.filtered_items.length === 0) {
          this.filtered_items = this.collection.models;
        }
        this.trigger('filter:finished');
        return this.render();
      };

      ListFacetOptions.prototype.setCheckboxes = function(ev) {
        var model, _i, _len, _ref1;
        _ref1 = this.collection.models;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          model = _ref1[_i];
          model.set('checked', ev.currentTarget.checked);
        }
        this.render();
        return this.triggerChange();
      };

      return ListFacetOptions;

    })(Views.Base);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/facets/list',['require','hilib/functions/general','models/list','collections/list.options','views/facets/main','views/facets/list.options','tpls'],function(require) {
    var Collections, Fn, ListFacet, Models, Views, tpls, _ref;
    Fn = require('hilib/functions/general');
    Models = {
      List: require('models/list')
    };
    Collections = {
      Options: require('collections/list.options')
    };
    Views = {
      Facet: require('views/facets/main'),
      Options: require('views/facets/list.options')
    };
    tpls = require('tpls');
    return ListFacet = (function(_super) {
      __extends(ListFacet, _super);

      function ListFacet() {
        _ref = ListFacet.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ListFacet.prototype.className = 'facet list';

      ListFacet.prototype.initialize = function(options) {
        this.options = options;
        ListFacet.__super__.initialize.apply(this, arguments);
        this.model = new Models.List(this.options.attrs, {
          parse: true
        });
        return this.render();
      };

      ListFacet.prototype.render = function() {
        var body, menu,
          _this = this;
        ListFacet.__super__.render.apply(this, arguments);
        this.collection = new Collections.Options(this.options.attrs.options, {
          parse: true
        });
        menu = tpls['faceted-search/facets/list.menu']({
          model: this.model.attributes,
          selectAll: this.collection.length <= 20
        });
        body = tpls['faceted-search/facets/list.body'](this.model.attributes);
        this.el.querySelector('header .options').innerHTML = menu;
        this.el.querySelector('.body').innerHTML = body;
        this.optionsView = new Views.Options({
          collection: this.collection,
          facetName: this.model.get('name')
        });
        this.$('.body').html(this.optionsView.el);
        this.listenTo(this.optionsView, 'filter:finished', this.renderFilteredOptionCount);
        this.listenTo(this.optionsView, 'change', function(data) {
          return _this.trigger('change', data);
        });
        return this;
      };

      ListFacet.prototype.renderFilteredOptionCount = function() {
        var collectionLength, filteredLength;
        filteredLength = this.optionsView.filtered_items.length;
        collectionLength = this.optionsView.collection.length;
        if (filteredLength === 0 || filteredLength === collectionLength) {
          this.$('header .options input[name="filter"]').addClass('nonefound');
          this.$('header small.optioncount').html('');
        } else {
          this.$('header .options input[name="filter"]').removeClass('nonefound');
          this.$('header small.optioncount').html(filteredLength + ' of ' + collectionLength);
        }
        return this;
      };

      ListFacet.prototype.events = function() {
        return _.extend({}, ListFacet.__super__.events.apply(this, arguments), {
          'keyup input[name="filter"]': function(ev) {
            return this.optionsView.filterOptions(ev.currentTarget.value);
          },
          'change header .options input[type="checkbox"][name="all"]': function(ev) {
            return this.optionsView.setCheckboxes(ev);
          },
          'click .orderby i': 'changeOrder'
        });
      };

      ListFacet.prototype.changeOrder = function(ev) {
        var $target, order, type;
        $target = $(ev.currentTarget);
        if ($target.hasClass('active')) {
          if ($target.hasClass('alpha')) {
            $target.toggleClass('fa-sort-alpha-desc');
            $target.toggleClass('fa-sort-alpha-asc');
          } else if ($target.hasClass('amount')) {
            $target.toggleClass('fa-sort-amount-desc');
            $target.toggleClass('fa-sort-amount-asc');
          }
        } else {
          this.$('.active').removeClass('active');
          $target.addClass('active');
        }
        type = $target.hasClass('alpha') ? 'alpha' : 'amount';
        order = $target.hasClass('fa-sort-' + type + '-desc') ? 'desc' : 'asc';
        return this.collection.orderBy(type + '_' + order);
      };

      ListFacet.prototype.update = function(newOptions) {
        return this.optionsView.collection.updateOptions(newOptions);
      };

      ListFacet.prototype.reset = function() {
        return this.optionsView.collection.revert();
      };

      return ListFacet;

    })(Views.Facet);
  });

}).call(this);

(function() {
  define('facetviewmap',['require','views/facets/boolean','views/facets/date','views/facets/list'],function(require) {
    return {
      BOOLEAN: require('views/facets/boolean'),
      DATE: require('views/facets/date'),
      LIST: require('views/facets/list')
    };
  });

}).call(this);

(function() {
  define('hilib/managers/token',['require','backbone','underscore','hilib/managers/pubsub'],function(require) {
    var Backbone, Pubsub, Token, _;
    Backbone = require('backbone');
    _ = require('underscore');
    Pubsub = require('hilib/managers/pubsub');
    Token = (function() {
      Token.prototype.token = null;

      function Token() {
        _.extend(this, Backbone.Events);
        _.extend(this, Pubsub);
      }

      Token.prototype.set = function(token, type) {
        this.token = token;
        if (type == null) {
          type = 'SimpleAuth';
        }
        sessionStorage.setItem('huygens_token_type', type);
        return sessionStorage.setItem('huygens_token', this.token);
      };

      Token.prototype.getType = function() {
        return sessionStorage.getItem('huygens_token_type');
      };

      Token.prototype.get = function() {
        if (this.token == null) {
          this.token = sessionStorage.getItem('huygens_token');
        }
        if (this.token == null) {
          return false;
        }
        return this.token;
      };

      Token.prototype.clear = function() {
        sessionStorage.removeItem('huygens_token');
        return sessionStorage.removeItem('huygens_token_type');
      };

      return Token;

    })();
    return new Token();
  });

}).call(this);

(function() {
  define('hilib/managers/ajax',['require','jquery','hilib/managers/token'],function(require) {
    var $, defaultOptions, token;
    $ = require('jquery');
    $.support.cors = true;
    token = require('hilib/managers/token');
    defaultOptions = {
      token: true
    };
    return {
      get: function(args, options) {
        if (options == null) {
          options = {};
        }
        return this.fire('get', args, options);
      },
      post: function(args, options) {
        if (options == null) {
          options = {};
        }
        return this.fire('post', args, options);
      },
      put: function(args, options) {
        if (options == null) {
          options = {};
        }
        return this.fire('put', args, options);
      },
      poll: function(args) {
        var done, dopoll, testFn, url,
          _this = this;
        url = args.url, testFn = args.testFn, done = args.done;
        dopoll = function() {
          var xhr;
          xhr = _this.get({
            url: url
          });
          return xhr.done(function(data, textStatus, jqXHR) {
            if (testFn(data)) {
              return done(data, textStatus, jqXHR);
            } else {
              return setTimeout(dopoll, 5000);
            }
          });
        };
        return dopoll();
      },
      fire: function(type, args, options) {
        var ajaxArgs,
          _this = this;
        options = $.extend({}, defaultOptions, options);
        ajaxArgs = {
          type: type,
          dataType: 'json',
          contentType: 'application/json; charset=utf-8',
          processData: false,
          crossDomain: true
        };
        if (options.token) {
          ajaxArgs.beforeSend = function(xhr) {
            return xhr.setRequestHeader('Authorization', "" + (token.getType()) + " " + (token.get()));
          };
        }
        return $.ajax($.extend(ajaxArgs, args));
      }
    };
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('hilib/models/base',['require','backbone','hilib/managers/pubsub'],function(require) {
    var Backbone, Base, Pubsub, _ref;
    Backbone = require('backbone');
    Pubsub = require('hilib/managers/pubsub');
    return Base = (function(_super) {
      __extends(Base, _super);

      function Base() {
        _ref = Base.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Base.prototype.initialize = function() {
        return _.extend(this, Pubsub);
      };

      return Base;

    })(Backbone.Model);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/searchresult',['require','hilib/managers/ajax','hilib/managers/token','config','hilib/models/base'],function(require) {
    var Models, SearchResult, ajax, config, token, _ref;
    ajax = require('hilib/managers/ajax');
    token = require('hilib/managers/token');
    config = require('config');
    Models = {
      Base: require('hilib/models/base')
    };
    return SearchResult = (function(_super) {
      __extends(SearchResult, _super);

      function SearchResult() {
        _ref = SearchResult.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      SearchResult.prototype.defaults = function() {
        return {
          _next: null,
          _prev: null,
          ids: [],
          numFound: null,
          results: [],
          rows: null,
          solrquery: '',
          sortableFields: [],
          start: null,
          term: ''
        };
      };

      SearchResult.prototype.initialize = function(attrs, options) {
        this.options = options;
        SearchResult.__super__.initialize.apply(this, arguments);
        return this.postURL = null;
      };

      SearchResult.prototype.sync = function(method, model, options) {
        var jqXHR,
          _this = this;
        if (method === 'read') {
          if (this.options.url != null) {
            return this.getResults(this.options.url, options.success);
          } else {
            jqXHR = ajax.post({
              url: config.baseUrl + config.searchPath,
              data: JSON.stringify(this.options.queryOptions),
              dataType: 'text'
            });
            jqXHR.done(function(data, textStatus, jqXHR) {
              var url;
              if (jqXHR.status === 201) {
                _this.postURL = jqXHR.getResponseHeader('Location');
                url = _this.options.resultRows != null ? _this.postURL + '?rows=' + _this.options.resultRows : _this.postURL;
                return _this.getResults(url, options.success);
              }
            });
            return jqXHR.fail(function(jqXHR, textStatus, errorThrown) {
              if (jqXHR.status === 401) {
                return _this.publish('unauthorized');
              }
            });
          }
        }
      };

      SearchResult.prototype.getResults = function(url, done) {
        var jqXHR,
          _this = this;
        ajax.token = config.token;
        jqXHR = ajax.get({
          url: url
        });
        jqXHR.done(function(data, textStatus, jqXHR) {
          return done(data);
        });
        return jqXHR.fail(function() {
          return console.error('Failed getting FacetedSearch results from the server!', arguments);
        });
      };

      SearchResult.prototype.page = function(pagenumber, database) {
        var start, url,
          _this = this;
        start = this.options.resultRows * (pagenumber - 1);
        url = this.postURL + ("?rows=" + this.options.resultRows + "&start=" + start);
        if (database != null) {
          url += "&database=" + database;
        }
        return this.getResults(url, function(data) {
          _this.set(data);
          return _this.publish('change:page', _this);
        });
      };

      return SearchResult;

    })(Models.Base);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('collections/searchresults',['require','hilib/mixins/pubsub','models/searchresult','hilib/managers/ajax','hilib/managers/token','config'],function(require) {
    var SearchResult, SearchResults, ajax, config, pubsub, token, _ref;
    pubsub = require('hilib/mixins/pubsub');
    SearchResult = require('models/searchresult');
    ajax = require('hilib/managers/ajax');
    token = require('hilib/managers/token');
    config = require('config');
    return SearchResults = (function(_super) {
      __extends(SearchResults, _super);

      function SearchResults() {
        _ref = SearchResults.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      SearchResults.prototype.model = SearchResult;

      SearchResults.prototype.initialize = function() {
        _.extend(this, pubsub);
        this.cachedModels = {};
        return this.on('add', this.setCurrent, this);
      };

      SearchResults.prototype.setCurrent = function(current) {
        var message;
        this.current = current;
        message = this.current.options.url != null ? 'change:cursor' : 'change:results';
        return this.publish(message, this.current);
      };

      SearchResults.prototype.runQuery = function(queryOptions) {
        var cacheString, options, resultRows, searchResult,
          _this = this;
        if (queryOptions.hasOwnProperty('resultRows')) {
          resultRows = queryOptions.resultRows;
          delete queryOptions.resultRows;
        }
        cacheString = JSON.stringify(queryOptions);
        if (this.cachedModels.hasOwnProperty(cacheString)) {
          return this.setCurrent(this.cachedModels[cacheString]);
        } else {
          this.trigger('request');
          options = {};
          options.cacheString = cacheString;
          options.queryOptions = queryOptions;
          if (resultRows != null) {
            options.resultRows = resultRows;
          }
          searchResult = new SearchResult(null, options);
          return searchResult.fetch({
            success: function(model) {
              _this.cachedModels[cacheString] = model;
              return _this.add(model);
            }
          });
        }
      };

      SearchResults.prototype.moveCursor = function(direction) {
        var searchResult, url,
          _this = this;
        url = direction === '_prev' || direction === '_next' ? this.current.get(direction) : direction;
        if (url != null) {
          if (this.cachedModels.hasOwnProperty(url)) {
            return this.setCurrent(this.cachedModels[url]);
          } else {
            searchResult = new SearchResult(null, {
              url: url
            });
            return searchResult.fetch({
              success: function(model, response, options) {
                _this.cachedModels[url] = model;
                return _this.add(model);
              }
            });
          }
        }
      };

      return SearchResults;

    })(Backbone.Collection);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/main',['require','collections/searchresults'],function(require) {
    var FacetedSearch, SearchResults, _ref;
    SearchResults = require('collections/searchresults');
    return FacetedSearch = (function(_super) {
      __extends(FacetedSearch, _super);

      function FacetedSearch() {
        _ref = FacetedSearch.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      FacetedSearch.prototype.defaults = function() {
        return {
          facetValues: [],
          sort: null
        };
      };

      FacetedSearch.prototype.initialize = function(queryOptions, options) {
        var _this = this;
        this.queryOptions = queryOptions;
        this.searchResults = new SearchResults();
        this.on('change', function(model, options) {
          return _this.searchResults.runQuery(_this.attributes);
        });
        return this.trigger('change');
      };

      FacetedSearch.prototype.set = function(attrs, options) {
        var facetValues;
        if (attrs.facetValue != null) {
          facetValues = _.reject(this.get('facetValues'), function(data) {
            return data.name === attrs.facetValue.name;
          });
          if (attrs.facetValue.values.length) {
            facetValues.push(attrs.facetValue);
          }
          attrs.facetValues = facetValues;
          delete attrs.facetValue;
        }
        return FacetedSearch.__super__.set.call(this, attrs, options);
      };

      FacetedSearch.prototype.reset = function() {
        this.clear({
          silent: true
        });
        this.set(this.defaults(), {
          silent: true
        });
        this.set(this.queryOptions, {
          silent: true
        });
        return this.trigger('change');
      };

      return FacetedSearch;

    })(Backbone.Model);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/search',['require','models/base'],function(require) {
    var Models, Search, _ref;
    Models = {
      Base: require('models/base')
    };
    return Search = (function(_super) {
      __extends(Search, _super);

      function Search() {
        _ref = Search.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Search.prototype.defaults = function() {
        return {
          term: '*',
          caseSensitive: false,
          fuzzy: false,
          title: 'Text Search',
          name: 'text_search'
        };
      };

      Search.prototype.queryData = function() {
        var attrs;
        attrs = _.extend({}, this.attributes);
        delete attrs.name;
        delete attrs.title;
        return attrs;
      };

      return Search;

    })(Models.Base);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/search',['require','config','models/search','views/facets/main','tpls'],function(require) {
    var Models, Search, Views, config, tpls, _ref;
    config = require('config');
    Models = {
      Search: require('models/search')
    };
    Views = {
      Facet: require('views/facets/main')
    };
    tpls = require('tpls');
    return Search = (function(_super) {
      __extends(Search, _super);

      function Search() {
        _ref = Search.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Search.prototype.className = 'facet search';

      Search.prototype.initialize = function(options) {
        var _this = this;
        Search.__super__.initialize.apply(this, arguments);
        this.model = new Models.Search(config.textSearchOptions);
        this.listenTo(this.model, 'change', function() {
          return _this.trigger('change', _this.model.queryData());
        });
        return this.render();
      };

      Search.prototype.render = function() {
        var body, menu;
        Search.__super__.render.apply(this, arguments);
        menu = tpls['faceted-search/facets/search.menu']({
          model: this.model
        });
        body = tpls['faceted-search/facets/search.body']({
          model: this.model
        });
        this.$('.options').html(menu);
        this.$('.body').html(body);
        return this;
      };

      Search.prototype.events = function() {
        return _.extend({}, Search.__super__.events.apply(this, arguments), {
          'click button': function(ev) {
            return ev.preventDefault();
          },
          'click button.active': 'search',
          'keyup input': 'activateSearchButton',
          'change input[type="checkbox"]': 'checkboxChanged'
        });
      };

      Search.prototype.checkboxChanged = function(ev) {
        var attr, cb, checkedArray, _i, _len, _ref1;
        if (attr = ev.currentTarget.getAttribute('data-attr')) {
          if (attr === 'searchInTranscriptions') {
            this.$('ul.textlayers').toggle(ev.currentTarget.checked);
          }
          this.model.set(attr, ev.currentTarget.checked);
        } else if (attr = ev.currentTarget.getAttribute('data-attr-array')) {
          checkedArray = [];
          _ref1 = this.el.querySelectorAll('[data-attr-array="' + attr + '"]');
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            cb = _ref1[_i];
            if (cb.checked) {
              checkedArray.push(cb.getAttribute('data-value'));
            }
          }
          this.model.set(attr, checkedArray);
        }
        return this.activateSearchButton(true);
      };

      Search.prototype.activateSearchButton = function(checkboxChanged) {
        var inputValue;
        if (checkboxChanged == null) {
          checkboxChanged = false;
        }
        if (checkboxChanged.hasOwnProperty('target')) {
          checkboxChanged = false;
        }
        inputValue = this.el.querySelector('input[name="search"]').value;
        if (inputValue.length > 1 && (this.model.get('term') !== inputValue || checkboxChanged)) {
          return this.$('button').addClass('active');
        } else {
          return this.$('button').removeClass('active');
        }
      };

      Search.prototype.search = function(ev) {
        var $search, inputValue;
        ev.preventDefault();
        this.$('button').removeClass('active');
        $search = this.$('input[name="search"]');
        $search.addClass('loading');
        inputValue = this.el.querySelector('input[name="search"]').value;
        return this.model.set('term', inputValue);
      };

      Search.prototype.update = function() {
        return this.$('input[name="search"]').removeClass('loading');
      };

      Search.prototype.reset = function() {
        return this.render();
      };

      return Search;

    })(Views.Facet);
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require.config({
    baseUrl: 'compiled/js',
    paths: {
      'tpls': '../templates',
      'jade': '../lib/jade/runtime',
      'hilib': '../lib/hilib/compiled'
    }
  });

  define('main',['require','hilib/functions/general','hilib/functions/dom','hilib/mixins/pubsub','config','facetviewmap','models/main','hilib/views/base','views/search','views/facets/list','views/facets/boolean','views/facets/date','tpls'],function(require) {
    var FacetedSearch, Fn, Models, Views, config, dom, facetViewMap, pubsub, tpls, _ref;
    Fn = require('hilib/functions/general');
    dom = require('hilib/functions/dom');
    pubsub = require('hilib/mixins/pubsub');
    config = require('config');
    facetViewMap = require('facetviewmap');
    Models = {
      FacetedSearch: require('models/main')
    };
    Views = {
      Base: require('hilib/views/base'),
      TextSearch: require('views/search'),
      Facets: {
        List: require('views/facets/list'),
        Boolean: require('views/facets/boolean'),
        Date: require('views/facets/date')
      }
    };
    tpls = require('tpls');
    return FacetedSearch = (function(_super) {
      __extends(FacetedSearch, _super);

      function FacetedSearch() {
        _ref = FacetedSearch.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      FacetedSearch.prototype.initialize = function(options) {
        var queryOptions,
          _this = this;
        this.facetViews = {};
        _.extend(this, pubsub);
        _.extend(facetViewMap, options.facetViewMap);
        delete options.facetViewMap;
        _.extend(config.facetNameMap, options.facetNameMap);
        delete options.facetNameMap;
        _.extend(config, options);
        queryOptions = _.extend(config.queryOptions, config.textSearchOptions);
        this.render();
        this.subscribe('change:results', function(responseModel) {
          _this.renderFacets();
          return _this.trigger('results:change', responseModel);
        });
        this.subscribe('change:cursor', function(responseModel) {
          return _this.trigger('results:change', responseModel);
        });
        this.subscribe('change:page', function(responseModel) {
          return _this.trigger('results:change', responseModel);
        });
        this.model = new Models.FacetedSearch(queryOptions);
        this.listenTo(this.model.searchResults, 'request', function() {
          var bb, div, el, loader, top;
          el = _this.el.querySelector('.faceted-search');
          div = _this.el.querySelector('.overlay');
          div.style.width = el.clientWidth + 'px';
          div.style.height = el.clientHeight + 'px';
          div.style.display = 'block';
          loader = _this.el.querySelector('.overlay div');
          bb = dom(el).boundingBox();
          loader.style.left = bb.left + bb.width / 2 + 'px';
          top = bb.height > document.documentElement.clientHeight ? '50vh' : bb.height / 2 + 'px';
          return loader.style.top = top;
        });
        return this.listenTo(this.model.searchResults, 'sync', function() {
          var el;
          el = _this.el.querySelector('.overlay');
          return el.style.display = 'none';
        });
      };

      FacetedSearch.prototype.render = function() {
        var rtpl;
        rtpl = tpls['faceted-search/main']();
        this.$el.html(rtpl);
        this.$('.loader').fadeIn('slow');
        return this;
      };

      FacetedSearch.prototype.renderFacets = function(data) {
        var View, facetData, fragment, index, textSearch, _ref1,
          _this = this;
        this.$('.loader').hide();
        this.$('.faceted-search > i.fa-compress').css('visibility', 'visible');
        if (this.model.searchResults.length === 1) {
          fragment = document.createDocumentFragment();
          if (config.search) {
            textSearch = new Views.TextSearch();
            this.$('.search-placeholder').html(textSearch.el);
            this.listenTo(textSearch, 'change', function(queryOptions) {
              return _this.model.set(queryOptions);
            });
            this.facetViews['textSearch'] = textSearch;
          }
          _ref1 = this.model.searchResults.current.get('facets');
          for (index in _ref1) {
            if (!__hasProp.call(_ref1, index)) continue;
            facetData = _ref1[index];
            if (facetData.type in facetViewMap) {
              View = facetViewMap[facetData.type];
              this.facetViews[facetData.name] = new View({
                attrs: facetData
              });
              this.listenTo(this.facetViews[facetData.name], 'change', function(queryOptions) {
                return _this.model.set(queryOptions);
              });
              fragment.appendChild(this.facetViews[facetData.name].el);
            } else {
              console.error('Unknown facetView', facetData.type);
            }
          }
          return this.el.querySelector('.facets').appendChild(fragment);
        } else {
          return this.update();
        }
      };

      FacetedSearch.prototype.events = function() {
        return {
          'click i.fa-compress': 'toggleFacets',
          'click i.fa-expand': 'toggleFacets'
        };
      };

      FacetedSearch.prototype.toggleFacets = function(ev) {
        var $button, facetNames, index, open, slideFacet,
          _this = this;
        $button = $(ev.currentTarget);
        open = $button.hasClass('fa-expand');
        $button.toggleClass('fa-compress');
        $button.toggleClass('fa-expand');
        facetNames = _.keys(this.facetViews);
        index = 0;
        slideFacet = function() {
          var facet, facetName;
          facetName = facetNames[index++];
          facet = _this.facetViews[facetName];
          if (facet != null) {
            if (facetName === 'textSearch') {
              return slideFacet();
            } else {
              if (open) {
                return facet.showBody(function() {
                  return slideFacet();
                });
              } else {
                return facet.hideBody(function() {
                  return slideFacet();
                });
              }
            }
          }
        };
        return slideFacet();
      };

      FacetedSearch.prototype.page = function(pagenumber, database) {
        return this.model.searchResults.current.page(pagenumber, database);
      };

      FacetedSearch.prototype.next = function() {
        return this.model.searchResults.moveCursor('_next');
      };

      FacetedSearch.prototype.prev = function() {
        return this.model.searchResults.moveCursor('_prev');
      };

      FacetedSearch.prototype.hasNext = function() {
        return this.model.searchResults.current.has('_next');
      };

      FacetedSearch.prototype.hasPrev = function() {
        return this.model.searchResults.current.has('_prev');
      };

      FacetedSearch.prototype.sortResultsBy = function(field) {
        return this.model.set({
          sort: field
        });
      };

      FacetedSearch.prototype.update = function() {
        var data, index, _ref1, _results;
        if (this.facetViews.hasOwnProperty('textSearch')) {
          this.facetViews.textSearch.update();
        }
        _ref1 = this.model.searchResults.current.get('facets');
        _results = [];
        for (index in _ref1) {
          if (!__hasProp.call(_ref1, index)) continue;
          data = _ref1[index];
          if (data.name === 'textSearch') {
            console.log('ALSO HERE 1');
          }
          _results.push(this.facetViews[data.name].update(data.options));
        }
        return _results;
      };

      FacetedSearch.prototype.reset = function() {
        var data, index, _ref1;
        if (this.facetViews.hasOwnProperty('textSearch')) {
          this.facetViews.textSearch.reset();
        }
        _ref1 = this.model.searchResults.last().get('facets');
        for (index in _ref1) {
          if (!__hasProp.call(_ref1, index)) continue;
          data = _ref1[index];
          if (data.name === 'textSearch') {
            console.log('ALSO HERE 2');
          }
          if (this.facetViews[data.name].reset) {
            this.facetViews[data.name].reset();
          }
        }
        return this.model.reset();
      };

      return FacetedSearch;

    })(Views.Base);
  });

}).call(this);

    define('jquery', function () { return $; });


    define('underscore', function () { return _; });

    define('backbone', function () { return Backbone; });

    // define('text', function () { return text; });
    // define('helpers/fns', function () { return Fn; });

    // define('managers/ajax', function () { return ajax; });

    return require('main');
}));
=======
(function(e,t){typeof define=="function"&&define.amd?define(["jquery","underscore","backbone"],t):e.facetedsearch=t()})(this,function(e,t,n){var r,i,s;return function(e){function d(e,t){return h.call(e,t)}function v(e,t){var n,r,i,s,o,u,a,f,c,h,p=t&&t.split("/"),d=l.map,v=d&&d["*"]||{};if(e&&e.charAt(0)===".")if(t){p=p.slice(0,p.length-1),e=p.concat(e.split("/"));for(f=0;f<e.length;f+=1){h=e[f];if(h===".")e.splice(f,1),f-=1;else if(h===".."){if(f===1&&(e[2]===".."||e[0]===".."))break;f>0&&(e.splice(f-1,2),f-=2)}}e=e.join("/")}else e.indexOf("./")===0&&(e=e.substring(2));if((p||v)&&d){n=e.split("/");for(f=n.length;f>0;f-=1){r=n.slice(0,f).join("/");if(p)for(c=p.length;c>0;c-=1){i=d[p.slice(0,c).join("/")];if(i){i=i[r];if(i){s=i,o=f;break}}}if(s)break;!u&&v&&v[r]&&(u=v[r],a=f)}!s&&u&&(s=u,o=a),s&&(n.splice(0,o,s),e=n.join("/"))}return e}function m(t,r){return function(){return n.apply(e,p.call(arguments,0).concat([t,r]))}}function g(e){return function(t){return v(t,e)}}function y(e){return function(t){a[e]=t}}function b(n){if(d(f,n)){var r=f[n];delete f[n],c[n]=!0,t.apply(e,r)}if(!d(a,n)&&!d(c,n))throw new Error("No "+n);return a[n]}function w(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function E(e){return function(){return l&&l.config&&l.config[e]||{}}}var t,n,o,u,a={},f={},l={},c={},h=Object.prototype.hasOwnProperty,p=[].slice;o=function(e,t){var n,r=w(e),i=r[0];return e=r[1],i&&(i=v(i,t),n=b(i)),i?n&&n.normalize?e=n.normalize(e,g(t)):e=v(e,t):(e=v(e,t),r=w(e),i=r[0],e=r[1],i&&(n=b(i))),{f:i?i+"!"+e:e,n:e,pr:i,p:n}},u={require:function(e){return m(e)},exports:function(e){var t=a[e];return typeof t!="undefined"?t:a[e]={}},module:function(e){return{id:e,uri:"",exports:a[e],config:E(e)}}},t=function(t,n,r,i){var s,l,h,p,v,g=[],w=typeof r,E;i=i||t;if(w==="undefined"||w==="function"){n=!n.length&&r.length?["require","exports","module"]:n;for(v=0;v<n.length;v+=1){p=o(n[v],i),l=p.f;if(l==="require")g[v]=u.require(t);else if(l==="exports")g[v]=u.exports(t),E=!0;else if(l==="module")s=g[v]=u.module(t);else if(d(a,l)||d(f,l)||d(c,l))g[v]=b(l);else{if(!p.p)throw new Error(t+" missing "+l);p.p.load(p.n,m(i,!0),y(l),{}),g[v]=a[l]}}h=r?r.apply(a[t],g):undefined;if(t)if(s&&s.exports!==e&&s.exports!==a[t])a[t]=s.exports;else if(h!==e||!E)a[t]=h}else t&&(a[t]=r)},r=i=n=function(r,i,s,a,f){return typeof r=="string"?u[r]?u[r](i):b(o(r,i).f):(r.splice||(l=r,i.splice?(r=i,i=s,s=null):r=e),i=i||function(){},typeof s=="function"&&(s=a,a=f),a?t(e,r,i,s):setTimeout(function(){t(e,r,i,s)},4),n)},n.config=function(e){return l=e,l.deps&&n(l.deps,l.callback),n},r._defined=a,s=function(e,t,n){t.splice||(n=t,t=[]),!d(a,e)&&!d(f,e)&&(f[e]=[e,t,n])},s.amd={jQuery:!0}}(),s("../lib/almond/almond",function(){}),function(){var e={}.hasOwnProperty;s("hilib/functions/general",["require","jquery"],function(r){var i;return i=r("jquery"),{closest:function(e,t){var n;n=e.matches||e.webkitMatchesSelector||e.mozMatchesSelector||e.msMatchesSelector;while(e){if(n.bind(e)(t))return e;e=e.parentNode}},generateID:function(e){var t,n;e=e!=null&&e>0?e-1:7,t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=t.charAt(Math.floor(Math.random()*52));while(e--)n+=t.charAt(Math.floor(Math.random()*t.length));return n},deepCopy:function(e){var t;return t=Array.isArray(e)?[]:{},i.extend(!0,t,e)},timeoutWithReset:function(){var e;return e=null,function(t,n,r){return e!=null&&(r!=null&&r(),clearTimeout(e)),e=setTimeout(function(){return e=null,n()},t)}}(),highlighter:function(e){var t,n,r;return e==null&&(e={}),t=e.className,r=e.tagName,t==null&&(t="hilite"),r==null&&(r="span"),n=null,{on:function(e){var i,s,o;return o=e.startNode,i=e.endNode,s=document.createRange(),s.setStartAfter(o),s.setEndBefore(i),n=document.createElement(r),n.className=t,n.appendChild(s.extractContents()),s.insertNode(n)},off:function(){return i(n).replaceWith(function(){return i(this).contents()})}}},position:function(e,t){var n,r;n=0,r=0;while(e!==t)n+=e.offsetLeft,r+=e.offsetTop,e=e.offsetParent;return{left:n,top:r}},boundingBox:function(e){var t;return t=i(e).offset(),t.width=e.clientWidth,t.height=e.clientHeight,t.right=t.left+t.width,t.bottom=t.top+t.height,t},isDescendant:function(e,t){var n;n=t.parentNode;while(n!=null){if(n===e)return!0;n=n.parentNode}return!1},removeFromArray:function(e,t){var n;return n=e.indexOf(t),e.splice(n,1),e},escapeRegExp:function(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")},flattenObject:function(r,i,s){var o,u;i==null&&(i={}),s==null&&(s="");for(o in r){if(!e.call(r,o))continue;u=r[o],!(t.isObject(u)&&!t.isArray(u)&&!t.isFunction(u))||u instanceof n.Model||u instanceof n.Collection?i[s+o]=u:this.flattenObject(u,i,s+o+".")}return i},compareJSON:function(n,r){var i,s,o;s={};for(i in n){if(!e.call(n,i))continue;o=n[i],r.hasOwnProperty(i)||(s[i]="removed")}for(i in r){if(!e.call(r,i))continue;o=r[i],n.hasOwnProperty(i)?t.isArray(o)||this.isObjectLiteral(o)?t.isEqual(n[i],r[i])||(s[i]=r[i]):n[i]!==r[i]&&(s[i]=r[i]):s[i]="added"}return s},isObjectLiteral:function(e){var t;if(e==null||typeof e!="object")return!1;t=e;while(Object.getPrototypeOf(t=Object.getPrototypeOf(t))!==null)0;return Object.getPrototypeOf(e)===t},getScrollPercentage:function(e){var t,n,r,i,s,o;return r=e.scrollTop,o=e.scrollHeight-e.clientHeight,n=e.scrollLeft,s=e.scrollWidth-e.clientWidth,i=o===0?0:Math.floor(r/o*100),t=s===0?0:Math.floor(n/s*100),{top:i,left:t}},setScrollPercentage:function(e,t){return t.top<5&&(t.top=0),t.top>95&&(t.top=100),e.scrollTop=(e.scrollHeight-e.clientHeight)*t.top/100,e.scrollLeft=(e.scrollWidth-e.clientWidth)*t.left/100},checkCheckboxes:function(e,t,n){var r,i,s,o,u;e==null&&(e='input[type="checkbox"]'),t==null&&(t=!0),n==null&&(n=document),i=n.querySelectorAll(e),u=[];for(s=0,o=i.length;s<o;s++)r=i[s],u.push(r.checked=t);return u},setCursorToEnd:function(e,t){var n,r,i;i=t!=null?t:window,t==null&&(t=e),t.focus(),n=document.createRange(),n.selectNodeContents(e),n.collapse(!1),r=i.getSelection();if(r!=null)return r.removeAllRanges(),r.addRange(n)},arraySum:function(e){return e.length===0?0:e.reduce(function(e,t){return t+e})},getAspectRatio:function(e,t,n,r){var i,s;return s=n/e,i=r/t,Math.min(s,i)},hasScrollBar:function(e){return e.scrollHeight>e.clientHeight||e.scrollWidth>e.clientWidth},hasXScrollBar:function(e){return e.scrollWidth>e.clientWidth},hasYScrollBar:function(e){return e.scrollHeight>e.clientHeight}}})}.call(this),function(){s("hilib/functions/dom",["require"],function(e){return function(e){return{closest:function(t){var n;n=e.matches||e.webkitMatchesSelector||e.mozMatchesSelector||e.msMatchesSelector;while(e){if(n.bind(e)(t))return e;e=e.parentNode}},prepend:function(t){return e.insertBefore(t,e.firstChild)},position:function(t){var n,r,i;t==null&&(t=document.body),n=0,i=0,r=e;while(r!==t){if(this.hasDescendant(t))break;n+=r.offsetLeft,i+=r.offsetTop,r=r.offsetParent}return{left:n,top:i}},hasDescendant:function(t){var n;n=t.parentNode;while(n!=null){if(n===e)return!0;n=n.parentNode}return!1},boundingBox:function(){var t;return t=this.position(),t.width=e.clientWidth,t.height=e.clientHeight,t.right=t.left+t.width,t.bottom=t.top+t.height,t},insertAfter:function(e,t){return t.parentNode.insertBefore(e,t.nextSibling)},highlightUntil:function(t,n){return n==null&&(n="highlight"),{on:function(){var r,i,s,o,u=this;s=document.createRange(),s.setStartAfter(e),s.setEndBefore(t),i=function(e){var t,n,r;return n=document.createRange(),n.selectNode(e),r=n.compareBoundaryPoints(Range.START_TO_START,s),t=n.compareBoundaryPoints(Range.END_TO_START,s),r===-1||t===1?NodeFilter.FILTER_SKIP:NodeFilter.FILTER_ACCEPT},i.acceptNode=i,o=document.createTreeWalker(s.commonAncestorContainer,NodeFilter.SHOW_ELEMENT,i,!1);while(o.nextNode())r=o.currentNode,(" "+r.className+" ").indexOf(" text ")>-1&&(r.className=r.className+" "+n);return this},off:function(){var t,r,i,s,o;s=document.querySelectorAll("."+n),o=[];for(r=0,i=s.length;r<i;r++)e=s[r],t=" "+e.className+" ",t=t.replace(" "+n+" ",""),o.push(e.className=t.replace(/^\s+|\s+$/g,""));return o}}}}}})}.call(this),function(){s("hilib/mixins/pubsub",["require","backbone"],function(e){var t;return t=e("backbone"),{subscribe:function(e,n){return this.listenTo(t,e,n)},publish:function(){return t.trigger.apply(t,arguments)}}})}.call(this),function(){s("config",["require"],function(e){return{baseUrl:"",searchPath:"",search:!0,token:null,queryOptions:{},facetNameMap:{}}})}.call(this),function(){s("hilib/functions/string",["require","jquery"],function(e){var t;return t=e("jquery"),{ucfirst:function(e){return e.charAt(0).toUpperCase()+e.slice(1)},slugify:function(e){var t,n,r,i;t="àáäâèéëêìíïîòóöôùúüûñç·/_:;",i="aaaaeeeeiiiioooouuuunc-----",e=e.trim().toLowerCase(),r=e.length;while(r--)n=t.indexOf(e[r]),n!==-1&&(e=e.substr(0,r)+i[n]+e.substr(r+1));return e.replace(/[^a-z0-9 -]/g,"").replace(/\s+|\-+/g,"-").replace(/^\-+|\-+$/g,"")},stripTags:function(e){return t("<span />").html(e).text()},onlyNumbers:function(e){return e.replace(/[^\d.]/g,"")},hashCode:function(e){var t,n,r,i,s,o;if(e.length===0)return!1;r=0;for(i=s=0,o=e.length;s<o;i=++s)n=e[i],t=e.charCodeAt(i),r=(r<<5)-r+t,r&=r;return r},insertAt:function(e,t,n){return e.slice(0,n)+t+e.slice(n)}}})}.call(this),function(){s("hilib/managers/pubsub",["require","backbone"],function(e){var t;return t=e("backbone"),{subscribe:function(e,n){return this.listenTo(t,e,n)},publish:function(){return t.trigger.apply(t,arguments)}}})}.call(this),function(){var e={}.hasOwnProperty,n=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("models/base",["require","backbone","hilib/managers/pubsub"],function(e){var r,i,s,o;return r=e("backbone"),s=e("hilib/managers/pubsub"),i=function(e){function r(){return o=r.__super__.constructor.apply(this,arguments),o}return n(r,e),r.prototype.initialize=function(){return t.extend(this,s)},r}(r.Model)})}.call(this),function(){var e={}.hasOwnProperty,t=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("models/facet",["require","config","models/base"],function(e){var r,i,s,o;return s=e("config"),i={Base:e("models/base")},r=function(e){function n(){return o=n.__super__.constructor.apply(this,arguments),o}return t(n,e),n.prototype.idAttribute="name",n.prototype.parse=function(e){if(e.title==null||e.title===""&&s.facetNameMap[e.name]!=null)e.title=s.facetNameMap[e.name];return e},n}(n.Model)})}.call(this),function(){var e={}.hasOwnProperty,t=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("models/boolean",["require","models/facet"],function(e){var n,r,i;return r={Facet:e("models/facet")},n=function(e){function n(){return i=n.__super__.constructor.apply(this,arguments),i}return t(n,e),n.prototype.set=function(e,t){return e==="options"?t=this.parseOptions(t):e.options!=null&&(e.options=this.parseOptions(e.options)),n.__super__.set.call(this,e,t)},n.prototype.parseOptions=function(e){return e.length===1&&e.push({name:(!JSON.parse(e[0].name)).toString(),count:0}),e},n}(r.Facet)})}.call(this),function(){var e={}.hasOwnProperty,n=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("views/base",["require","backbone","hilib/managers/pubsub"],function(e){var r,i,s,o;return r=e("backbone"),s=e("hilib/managers/pubsub"),i=function(e){function r(){return o=r.__super__.constructor.apply(this,arguments),o}return n(r,e),r.prototype.initialize=function(){return t.extend(this,s)},r}(r.View)})}.call(this),function(e){if("function"==typeof bootstrap)bootstrap("jade",e);else if("object"==typeof exports)module.exports=e();else if("function"==typeof s&&s.amd)s("jade",e);else if("undefined"!=typeof ses){if(!ses.ok())return;ses.makeJade=e}else"undefined"!=typeof window?window.jade=e():global.jade=e()}(function(){var e,t,n,r,s;return function o(e,t,n){function r(u,a){if(!t[u]){if(!e[u]){var f=typeof i=="function"&&i;if(!a&&f)return f(u,!0);if(s)return s(u,!0);throw new Error("Cannot find module '"+u+"'")}var l=t[u]={exports:{}};e[u][0].call(l.exports,function(t){var n=e[u][1][t];return r(n?n:t)},l,l.exports,o,e,t,n)}return t[u].exports}var s=typeof i=="function"&&i;for(var u=0;u<n.length;u++)r(n[u]);return r}({1:[function(e,t,n){function r(e){return e!=null&&e!==""}function i(e){return Array.isArray(e)?e.map(i).filter(r).join(" "):e}Array.isArray||(Array.isArray=function(e){return"[object Array]"==Object.prototype.toString.call(e)}),Object.keys||(Object.keys=function(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(n);return t}),n.merge=function(t,n){var i=t["class"],s=n["class"];if(i||s)i=i||[],s=s||[],Array.isArray(i)||(i=[i]),Array.isArray(s)||(s=[s]),t["class"]=i.concat(s).filter(r);for(var o in n)o!="class"&&(t[o]=n[o]);return t},n.attrs=function(t,r){var s=[],o=t.terse;delete t.terse;var u=Object.keys(t),a=u.length;if(a){s.push("");for(var f=0;f<a;++f){var l=u[f],c=t[l];"boolean"==typeof c||null==c?c&&(o?s.push(l):s.push(l+'="'+l+'"')):0==l.indexOf("data")&&"string"!=typeof c?s.push(l+"='"+JSON.stringify(c)+"'"):"class"==l?r&&r[l]?(c=n.escape(i(c)))&&s.push(l+'="'+c+'"'):(c=i(c))&&s.push(l+'="'+c+'"'):r&&r[l]?s.push(l+'="'+n.escape(c)+'"'):s.push(l+'="'+c+'"')}}return s.join(" ")},n.escape=function(t){return String(t).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")},n.rethrow=function s(t,n,r,i){if(t instanceof Error){if((typeof window!="undefined"||!n)&&!i)throw t.message+=" on line "+r,t;try{i=i||e("fs").readFileSync(n,"utf8")}catch(o){s(t,null,r)}var u=3,a=i.split("\n"),f=Math.max(r-u,0),l=Math.min(a.length,r+u),u=a.slice(f,l).map(function(e,t){var n=t+f+1;return(n==r?"  > ":"    ")+n+"| "+e}).join("\n");throw t.path=n,t.message=(n||"Jade")+":"+r+"\n"+u+"\n\n"+t.message,t}throw t}},{fs:2}],2:[function(e,t,n){},{}]},{},[1])(1)}),s("tpls",["jade"],function(e){return e&&e.runtime!==undefined&&(e=e.runtime),this.JST=this.JST||{},this.JST["faceted-search/facets/boolean.body"]=function(n){var r=[],i=n||{},s=i.options,o=i.name,u=i.ucfirst;return r.push("<ul>"),function(){var t=s;if("number"==typeof t.length)for(var n=0,i=t.length;n<i;n++){var a=t[n];r.push('<li><div class="row span6"><div class="cell span5"><input'+e.attrs({id:o+"_"+a.name,name:o+"_"+a.name,type:"checkbox","data-value":a.name},{id:!0,name:!0,type:!0,"data-value":!0})+"/><label"+e.attrs({"for":o+"_"+a.name},{"for":!0})+">"+e.escape(null==(e.interp=u(a.name))?"":e.interp)+'</label></div><div class="cell span1 alignright"><div class="count">'+e.escape(null==(e.interp=a.count)?"":e.interp)+"</div></div></div></li>")}else{var i=0;for(var n in t){i++;var a=t[n];r.push('<li><div class="row span6"><div class="cell span5"><input'+e.attrs({id:o+"_"+a.name,name:o+"_"+a.name,type:"checkbox","data-value":a.name},{id:!0,name:!0,type:!0,"data-value":!0})+"/><label"+e.attrs({"for":o+"_"+a.name},{"for":!0})+">"+e.escape(null==(e.interp=u(a.name))?"":e.interp)+'</label></div><div class="cell span1 alignright"><div class="count">'+e.escape(null==(e.interp=a.count)?"":e.interp)+"</div></div></div></li>")}}}.call(this),r.push("</ul>"),r.join("")},this.JST["faceted-search/facets/date"]=function(n){var r=[],i=n||{},s=i.name,o=i.title,u=i.options;return r.push("<header><h3"+e.attrs({"data-name":s},{"data-name":!0})+">"+e.escape(null==(e.interp=o)?"":e.interp)+'</h3></header><div class="body"><label>From:</label><select>'),function(){var t=u;if("number"==typeof t.length)for(var n=0,i=t.length;n<i;n++){var s=t[n];r.push("<option>"+e.escape(null==(e.interp=s)?"":e.interp)+"</option>")}else{var i=0;for(var n in t){i++;var s=t[n];r.push("<option>"+e.escape(null==(e.interp=s)?"":e.interp)+"</option>")}}}.call(this),r.push("</select><label>To:</label><select>"),function(){var t=u.reverse();if("number"==typeof t.length)for(var n=0,i=t.length;n<i;n++){var s=t[n];r.push("<option>"+e.escape(null==(e.interp=s)?"":e.interp)+"</option>")}else{var i=0;for(var n in t){i++;var s=t[n];r.push("<option>"+e.escape(null==(e.interp=s)?"":e.interp)+"</option>")}}}.call(this),r.push("</select></div>"),r.join("")},this.JST["faceted-search/facets/list.body"]=function(t){var n=[];return n.push("<ul></ul>"),n.join("")},this.JST["faceted-search/facets/list.menu"]=function(t){var n=[];return n.push('<div class="row span4 align middle"><div class="cell span2"><input type="text" name="filter"/></div><div class="cell span1"><small class="optioncount"></small></div><div class="cell span1 alignright"><nav><ul><li class="all">All </li><li class="none">None</li></ul></nav></div></div>'),n.join("")},this.JST["faceted-search/facets/list.options"]=function(n){var r=[],i=n||{},s=i.options,o=i.generateID;return r.push("<ul>"),function(){var t=s;if("number"==typeof t.length)for(var n=0,i=t.length;n<i;n++){var u=t[n];randomId=o(),r.push("<li><div"+e.attrs({"data-count":u.get("count"),"class":["row","span6"]},{"data-count":!0})+'><div class="cell span5"><input'+e.attrs({id:randomId,name:randomId,type:"checkbox","data-value":u.id,checked:u.get("checked")?!0:!1},{id:!0,name:!0,type:!0,"data-value":!0,checked:!0})+"/><label"+e.attrs({"for":randomId},{"for":!0})+">"+(null==(e.interp=u.id===":empty"?"<i>(empty)</i>":u.id)?"":e.interp)+'</label></div><div class="cell span1 alignright"><div class="count">'+e.escape(null==(e.interp=u.get("count")===0?u.get("total"):u.get("count"))?"":e.interp)+"</div></div></div></li>")}else{var i=0;for(var n in t){i++;var u=t[n];randomId=o(),r.push("<li><div"+e.attrs({"data-count":u.get("count"),"class":["row","span6"]},{"data-count":!0})+'><div class="cell span5"><input'+e.attrs({id:randomId,name:randomId,type:"checkbox","data-value":u.id,checked:u.get("checked")?!0:!1},{id:!0,name:!0,type:!0,"data-value":!0,checked:!0})+"/><label"+e.attrs({"for":randomId},{"for":!0})+">"+(null==(e.interp=u.id===":empty"?"<i>(empty)</i>":u.id)?"":e.interp)+'</label></div><div class="cell span1 alignright"><div class="count">'+e.escape(null==(e.interp=u.get("count")===0?u.get("total"):u.get("count"))?"":e.interp)+"</div></div></div></li>")}}}.call(this),r.push("</ul>"),r.join("")},this.JST["faceted-search/facets/main"]=function(n){var r=[],i=n||{},s=i.name,o=i.title;return r.push('<div class="placeholder pad4"><header><h3'+e.attrs({"data-name":s},{"data-name":!0})+">"+e.escape(null==(e.interp=o)?"":e.interp)+'</h3><svg version="1.1" baseProfile="full" width="12" height="12" viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg"><circle cx="100" cy="100" r="90" fill="#EEE" stroke="#666" stroke-width="10"></circle><rect x="50" y="90" width="100" height="20" fill="#222"></rect><rect x="90" y="50" width="20" height="100" fill="#222" class="vertical"></rect></svg><div class="options"></div></header><div class="body"></div></div>'),r.join("")},this.JST["faceted-search/facets/search.body"]=function(t){var n=[];return n.push('<div class="row span4 align middle"><div class="cell span3"><div class="padr4"><input type="text" name="search"/></div></div><div class="cell span1"><button class="search">Search</button></div></div>'),n.join("")},this.JST["faceted-search/facets/search.menu"]=function(n){var r=[],i=n||{},s=i.model;r.push('<div class="row span1 align middle"><div class="cell span1 casesensitive"><input id="cb_casesensitive" type="checkbox" name="cb_casesensitive" data-attr="caseSensitive"/><label for="cb_casesensitive">Match case</label></div><div class="cell span1 fuzzy"><input id="cb_fuzzy" type="checkbox" name="cb_fuzzy" data-attr="fuzzy"/><label for="cb_fuzzy">Fuzzy</label></div></div>');if(s.has("searchInAnnotations")||s.has("searchInTranscriptions"))r.push('<div class="row span1"><div class="cell span1"><h4>Search</h4><ul class="searchins">'),s.has("searchInTranscriptions")&&r.push('<li class="searchin"><input'+e.attrs({id:"cb_searchin_transcriptions",type:"checkbox","data-attr":"searchInTranscriptions",checked:s.get("searchInTranscriptions")},{id:!0,type:!0,"data-attr":!0,checked:!0})+'/><label for="cb_searchin_transcriptions">Transcriptions</label></li>'),s.has("searchInAnnotations")&&r.push('<li class="searchin"><input'+e.attrs({id:"cb_searchin_annotations",type:"checkbox","data-attr":"searchInAnnotations",checked:s.get("searchInAnnotations")},{id:!0,type:!0,"data-attr":!0,checked:!0})+'/><label for="cb_searchin_annotations">Annotations</label></li>'),r.push("</ul></div></div>");return s.has("textLayers")&&(r.push('<div class="row span1"><div class="cell span1"><h4>Text layers</h4><ul class="textlayers">'),function(){var t=s.get("textLayers");if("number"==typeof t.length)for(var n=0,i=t.length;n<i;n++){var o=t[n];r.push('<li class="textlayer"><input'+e.attrs({id:"cb_textlayer"+o,type:"checkbox","data-attr-array":"textLayers","data-value":o,checked:!0},{id:!0,type:!0,"data-attr-array":!0,"data-value":!0,checked:!0})+"/><label"+e.attrs({"for":"cb_textlayer"+o},{"for":!0})+">"+e.escape(null==(e.interp=o)?"":e.interp)+"</label></li>")}else{var i=0;for(var n in t){i++;var o=t[n];r.push('<li class="textlayer"><input'+e.attrs({id:"cb_textlayer"+o,type:"checkbox","data-attr-array":"textLayers","data-value":o,checked:!0},{id:!0,type:!0,"data-attr-array":!0,"data-value":!0,checked:!0})+"/><label"+e.attrs({"for":"cb_textlayer"+o},{"for":!0})+">"+e.escape(null==(e.interp=o)?"":e.interp)+"</label></li>")}}}.call(this),r.push("</ul></div></div>")),r.join("")},this.JST["faceted-search/main"]=function(t){var n=[];return n.push('<div class="overlay"><img src="../images/faceted-search/loader.gif"/></div><div class="faceted-search"><form><div class="search-placeholder"></div><div class="facets"><div class="loader"><h4>Loading facets...</h4><br/><img src="../images/faceted-search/loader.gif"/></div></div></form></div>'),n.join("")},this.JST}),function(){var t={}.hasOwnProperty,n=function(e,n){function i(){this.constructor=e}for(var r in n)t.call(n,r)&&(e[r]=n[r]);return i.prototype=n.prototype,e.prototype=new i,e.__super__=n.prototype,e};s("views/facets/main",["require","views/base","tpls"],function(t){var r,i,s,o;return i={Base:t("views/base")},s=t("tpls"),r=function(t){function r(){return o=r.__super__.constructor.apply(this,arguments),o}return n(r,t),r.prototype.initialize=function(){return r.__super__.initialize.apply(this,arguments)},r.prototype.events=function(){return{"click h3":"toggleBody","click header svg":"toggleOptions"}},r.prototype.toggleOptions=function(e){var t;return t=this.el.querySelector("header svg"),t.hasAttribute("class")?t.removeAttribute("class"):t.setAttribute("class","active"),this.$("header .options").slideToggle(),this.$('header .options input[name="filter"]').focus()},r.prototype.toggleBody=function(t){return e(t.currentTarget).parents(".facet").find(".body").slideToggle()},r.prototype.render=function(){var e;return e=s["faceted-search/facets/main"](this.model.attributes),this.$el.html(e),this},r.prototype.update=function(e){},r}(i.Base)})}.call(this),function(){var e={}.hasOwnProperty,n=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("views/facets/boolean",["require","hilib/functions/string","models/boolean","views/facets/main","tpls"],function(e){var r,i,s,o,u,a;return s=e("hilib/functions/string"),i={Boolean:e("models/boolean")},o={Facet:e("views/facets/main")},u=e("tpls"),r=function(e){function r(){return a=r.__super__.constructor.apply(this,arguments),a}return n(r,e),r.prototype.className="facet boolean",r.prototype.events=function(){return t.extend({},r.__super__.events.apply(this,arguments),{'change input[type="checkbox"]':"checkChanged"})},r.prototype.checkChanged=function(e){return this.trigger("change",{facetValue:{name:this.model.get("name"),values:t.map(this.$("input:checked"),function(e){return e.getAttribute("data-value")})}})},r.prototype.initialize=function(e){return r.__super__.initialize.apply(this,arguments),this.model=new i.Boolean(e.attrs,{parse:!0}),this.listenTo(this.model,"change:options",this.render),this.render()},r.prototype.render=function(){var e;return r.__super__.render.apply(this,arguments),e=u["faceted-search/facets/boolean.body"](t.extend(this.model.attributes,{ucfirst:s.ucfirst})),this.$(".body").html(e),this.$("header svg").hide(),this},r.prototype.update=function(e){return this.model.set("options",e)},r.prototype.reset=function(){return this.render()},r}(o.Facet)})}.call(this),function(){var e={}.hasOwnProperty,n=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("models/date",["require","models/facet"],function(e){var r,i,s;return i={Facet:e("models/facet")},r=function(e){function r(){return s=r.__super__.constructor.apply(this,arguments),s}return n(r,e),r.prototype.parse=function(e){return e.options=t.map(t.pluck(e.options,"name"),function(e){return e.substr(0,4)}),e.options=t.unique(e.options),e.options.sort(),e},r}(i.Facet)})}.call(this),function(){var e={}.hasOwnProperty,n=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("views/facets/date",["require","hilib/functions/string","models/date","views/facets/main","tpls"],function(e){var r,i,s,o,u,a;return s=e("hilib/functions/string"),i={Date:e("models/date")},o={Facet:e("views/facets/main")},u=e("tpls"),r=function(e){function r(){return a=r.__super__.constructor.apply(this,arguments),a}return n(r,e),r.prototype.className="facet date",r.prototype.initialize=function(e){return r.__super__.initialize.apply(this,arguments),this.model=new i.Date(e.attrs,{parse:!0}),this.listenTo(this.model,"change:options",this.render),this.render()},r.prototype.render=function(){var e;return r.__super__.render.apply(this,arguments),e=u["faceted-search/facets/date"](t.extend(this.model.attributes,{ucfirst:s.ucfirst})),this.$(".placeholder").html(e),this},r.prototype.update=function(e){},r.prototype.reset=function(){},r}(o.Facet)})}.call(this),function(){var e={}.hasOwnProperty,t=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("models/list",["require","models/facet"],function(e){var n,r,i;return r={Facet:e("models/facet")},n=function(e){function n(){return i=n.__super__.constructor.apply(this,arguments),i}return t(n,e),n}(r.Facet)})}.call(this),function(){var e={}.hasOwnProperty,t=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("models/list.option",["require","models/base"],function(e){var n,r,i;return r={Base:e("models/base")},n=function(e){function n(){return i=n.__super__.constructor.apply(this,arguments),i}return t(n,e),n.prototype.idAttribute="name",n.prototype.defaults=function(){return{name:"",count:0,total:0,checked:!1}},n.prototype.parse=function(e){return e.total=e.count,e},n}(r.Base)})}.call(this),function(){s("collections/base",["require","backbone"],function(e){var t;return t=e("backbone"),t.Collection})}.call(this),function(){var e={}.hasOwnProperty,n=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("collections/list.options",["require","models/list.option","collections/base"],function(e){var r,i,s,o;return s={Option:e("models/list.option")},r={Base:e("collections/base")},i=function(e){function r(){return o=r.__super__.constructor.apply(this,arguments),o}return n(r,e),r.prototype.model=s.Option,r.prototype.comparator=function(e){return-1*+e.get("count")},r.prototype.revert=function(){var e=this;return this.each(function(e){return e.set("checked",!1,{silent:!0})}),this.trigger("change")},r.prototype.updateOptions=function(e){var n=this;return e==null&&(e=[]),this.each(function(e){return e.set("count",0,{silent:!0})}),t.each(e,function(e){var t;return t=n.get(e.name),t!=null?t.set("count",e.count,{silent:!0}):(t=new s.Option(e),n.add(t))}),this.sort()},r}(r.Base)})}.call(this),function(){var e={}.hasOwnProperty,n=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("views/facets/list.options",["require","hilib/functions/general","views/base","models/list","tpls"],function(e){var r,i,s,o,u,a;return r=e("hilib/functions/general"),o={Base:e("views/base")},s={List:e("models/list")},u=e("tpls"),i=function(e){function i(){return a=i.__super__.constructor.apply(this,arguments),a}return n(i,e),i.prototype.filtered_items=[],i.prototype.events=function(){return{'change input[type="checkbox"]':"checkChanged"}},i.prototype.checkChanged=function(e){var n;return n=e.currentTarget.getAttribute("data-value"),this.collection.get(n).set("checked",e.currentTarget.checked),this.trigger("change",{facetValue:{name:this.options.facetName,values:t.map(this.$("input:checked"),function(e){return e.getAttribute("data-value")})}})},i.prototype.initialize=function(){return i.__super__.initialize.apply(this,arguments),this.listenTo(this.collection,"sort",this.render),this.listenTo(this.collection,"change",this.render),this.render()},i.prototype.render=function(){var e,t;return e=this.filtered_items.length>0?this.filtered_items:this.collection.models,t=u["faceted-search/facets/list.options"]({options:e,generateID:r.generateID}),this.$el.html(t)},i.prototype.filterOptions=function(e){var t;return t=new RegExp(e,"i"),this.filtered_items=this.collection.filter(function(e){return t.test(e.id)}),this.trigger("filter:finished"),this.render()},i}(o.Base)})}.call(this),function(){var e={}.hasOwnProperty,n=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("views/facets/list",["require","hilib/functions/general","models/list","collections/list.options","views/facets/main","views/facets/list.options","tpls"],function(e){var r,i,s,o,u,a,f;return i=e("hilib/functions/general"),o={List:e("models/list")},r={Options:e("collections/list.options")},u={Facet:e("views/facets/main"),Options:e("views/facets/list.options")},a=e("tpls"),s=function(e){function i(){return f=i.__super__.constructor.apply(this,arguments),f}return n(i,e),i.prototype.checked=[],i.prototype.filtered_items=[],i.prototype.className="facet list",i.prototype.events=function(){return t.extend({},i.__super__.events.apply(this,arguments),{"click li.all":"selectAll","click li.none":"deselectAll",'keyup input[name="filter"]':function(e){return this.optionsView.filterOptions(e.currentTarget.value)}})},i.prototype.selectAll=function(){var e,t,n,r,i;t=this.el.querySelectorAll('input[type="checkbox"]'),i=[];for(n=0,r=t.length;n<r;n++)e=t[n],i.push(e.checked=!0);return i},i.prototype.deselectAll=function(){var e,t,n,r,i;t=this.el.querySelectorAll('input[type="checkbox"]'),i=[];for(n=0,r=t.length;n<r;n++)e=t[n],i.push(e.checked=!1);return i},i.prototype.initialize=function(e){return this.options=e,i.__super__.initialize.apply(this,arguments),this.model=new o.List(this.options.attrs,{parse:!0}),this.render()},i.prototype.render=function(){var e,t,n,s=this;return i.__super__.render.apply(this,arguments),t=a["faceted-search/facets/list.menu"](this.model.attributes),e=a["faceted-search/facets/list.body"](this.model.attributes),this.el.querySelector("header .options").innerHTML=t,this.el.querySelector(".body").innerHTML=e,n=new r.Options(this.options.attrs.options,{parse:!0}),this.optionsView=new u.Options({el:this.el.querySelector(".body"),collection:n,facetName:this.model.get("name")}),this.listenTo(this.optionsView,"filter:finished",this.renderFilteredOptionCount),this.listenTo(this.optionsView,"change",function(e){return s.trigger("change",e)}),this},i.prototype.renderFilteredOptionCount=function(){var e,t;return t=this.optionsView.filtered_items.length,e=this.optionsView.collection.length,t===0||t===e?(this.$('header .options input[name="filter"]').addClass("nonefound"),this.$("header small.optioncount").html("")):(this.$('header .options input[name="filter"]').removeClass("nonefound"),this.$("header small.optioncount").html(t+" of "+e)),this},i.prototype.update=function(e){return this.optionsView.collection.updateOptions(e)},i.prototype.reset=function(){return this.optionsView.collection.revert()},i}(u.Facet)})}.call(this),function(){s("facetviewmap",["require","views/facets/boolean","views/facets/date","views/facets/list"],function(e){return{BOOLEAN:e("views/facets/boolean"),DATE:e("views/facets/date"),LIST:e("views/facets/list")}})}.call(this),function(){s("hilib/managers/token",["require","backbone","underscore","hilib/managers/pubsub"],function(e){var t,n,r,i;return t=e("backbone"),i=e("underscore"),n=e("hilib/managers/pubsub"),r=function(){function e(){i.extend(this,t.Events),i.extend(this,n)}return e.prototype.token=null,e.prototype.set=function(e,t){return this.token=e,t==null&&(t="SimpleAuth"),sessionStorage.setItem("huygens_token_type",t),sessionStorage.setItem("huygens_token",this.token)},e.prototype.getType=function(){return sessionStorage.getItem("huygens_token_type")},e.prototype.get=function(){return this.token==null&&(this.token=sessionStorage.getItem("huygens_token")),this.token==null?!1:this.token},e.prototype.clear=function(){return sessionStorage.removeItem("huygens_token"),sessionStorage.removeItem("huygens_token_type")},e}(),new r})}.call(this),function(){s("hilib/managers/ajax",["require","jquery","hilib/managers/token"],function(e){var t,n,r;return t=e("jquery"),t.support.cors=!0,r=e("hilib/managers/token"),n={token:!0},{get:function(e,t){return t==null&&(t={}),this.fire("get",e,t)},post:function(e,t){return t==null&&(t={}),this.fire("post",e,t)},put:function(e,t){return t==null&&(t={}),this.fire("put",e,t)},poll:function(e){var t,n,r,i,s=this;return i=e.url,r=e.testFn,t=e.done,n=function(){var e;return e=s.get({url:i}),e.done(function(e,i,s){return r(e)?t(e,i,s):setTimeout(n,5e3)})},n()},fire:function(e,i,s){var o,u=this;return s=t.extend({},n,s),o={type:e,dataType:"json",contentType:"application/json; charset=utf-8",processData:!1,crossDomain:!0},s.token&&(o.beforeSend=function(e){return e.setRequestHeader("Authorization",""+r.getType()+" "+r.get())}),t.ajax(t.extend(o,i))}}})}.call(this),function(){var e={}.hasOwnProperty,n=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("hilib/models/base",["require","backbone","hilib/managers/pubsub"],function(e){var r,i,s,o;return r=e("backbone"),s=e("hilib/managers/pubsub"),i=function(e){function r(){return o=r.__super__.constructor.apply(this,arguments),o}return n(r,e),r.prototype.initialize=function(){return t.extend(this,s)},r}(r.Model)})}.call(this),function(){var e={}.hasOwnProperty,t=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("models/searchresult",["require","hilib/managers/ajax","hilib/managers/token","config","hilib/models/base"],function(e){var n,r,i,s,o,u;return i=e("hilib/managers/ajax"),o=e("hilib/managers/token"),s=e("config"),n={Base:e("hilib/models/base")},r=function(e){function n(){return u=n.__super__.constructor.apply(this,arguments),u}return t(n,e),n.prototype.defaults=function(){return{_next:null,_prev:null,ids:[],numFound:null,results:[],rows:null,solrquery:"",sortableFields:[],start:null,term:""}},n.prototype.initialize=function(e,t){return this.options=t,n.__super__.initialize.apply(this,arguments),this.postURL=null},n.prototype.sync=function(e,t,n){var r,o=this;if(e==="read")return this.options.url!=null?this.getResults(this.options.url,n.success):(r=i.post({url:s.baseUrl+s.searchPath,data:JSON.stringify(this.options.queryOptions),dataType:"text"}),r.done(function(e,t,r){var i;if(r.status===201)return o.postURL=r.getResponseHeader("Location"),i=o.options.resultRows!=null?o.postURL+"?rows="+o.options.resultRows:o.postURL,o.getResults(i,n.success)}),r.fail(function(e,t,n){if(e.status===401)return o.publish("unauthorized")}))},n.prototype.getResults=function(e,t){var n,r=this;return i.token=s.token,n=i.get({url:e}),n.done(function(e,n,r){return t(e)}),n.fail(function(){return console.error("Failed getting FacetedSearch results from the server!",arguments)})},n.prototype.page=function(e,t){var n,r,i=this;return n=this.options.resultRows*(e-1),r=this.postURL+("?rows="+this.options.resultRows+"&start="+n),t!=null&&(r+="&database="+t),this.getResults(r,function(e){return i.set(e),i.publish("change:page",i,t)})},n}(n.Base)})}.call(this),function(){var e={}.hasOwnProperty,r=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("collections/searchresults",["require","hilib/mixins/pubsub","models/searchresult","hilib/managers/ajax","hilib/managers/token","config"],function(e){var i,s,o,u,a,f,l;return a=e("hilib/mixins/pubsub"),i=e("models/searchresult"),o=e("hilib/managers/ajax"),f=e("hilib/managers/token"),u=e("config"),s=function(e){function n(){return l=n.__super__.constructor.apply(this,arguments),l}return r(n,e),n.prototype.model=i,n.prototype.initialize=function(){return t.extend(this,a),this.cachedModels={},this.on("add",this.setCurrent,this)},n.prototype.setCurrent=function(e){var t;return this.current=e,t=this.current.options.url!=null?"change:cursor":"change:results",this.publish(t,this.current)},n.prototype.runQuery=function(e){var t,n,r,s=this;return t=JSON.stringify(e),this.cachedModels.hasOwnProperty(t)?this.setCurrent(this.cachedModels[t]):(this.trigger("request"),n={},n.cacheString=t,n.queryOptions=e,e.hasOwnProperty("resultRows")&&(n.resultRows=e.resultRows,delete e.resultRows),r=new i(null,n),r.fetch({success:function(e){return s.cachedModels[n.queryOptions]=e,s.add(e)}}))},n.prototype.moveCursor=function(e){var t,n,r=this;n=e==="_prev"||e==="_next"?this.current.get(e):e;if(n!=null)return this.cachedModels.hasOwnProperty(n)?this.setCurrent(this.cachedModels[n]):(t=new i(null,{url:n}),t.fetch({success:function(e,t,i){return r.cachedModels[n]=e,r.add(e)}}))},n}(n.Collection)})}.call(this),function(){var e={}.hasOwnProperty,r=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("models/main",["require","collections/searchresults"],function(e){var i,s,o;return s=e("collections/searchresults"),i=function(e){function n(){return o=n.__super__.constructor.apply(this,arguments),o}return r(n,e),n.prototype.defaults=function(){return{facetValues:[]}},n.prototype.initialize=function(e,t){var n=this;return this.queryOptions=e,this.searchResults=new s,this.on("change",function(e,t){return n.searchResults.runQuery(n.attributes)}),this.trigger("change")},n.prototype.set=function(e,r){var i;return e.facetValue!=null&&(i=t.reject(this.get("facetValues"),function(t){return t.name===e.facetValue.name}),e.facetValue.values.length&&i.push(e.facetValue),e.facetValues=i,delete e.facetValue),n.__super__.set.call(this,e,r)},n.prototype.reset=function(){return this.clear({silent:!0}),this.set(this.defaults(),{silent:!0}),this.set(this.queryOptions,{silent:!0}),this.trigger("change")},n}(n.Model)})}.call(this),function(){var e={}.hasOwnProperty,n=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("models/search",["require","models/base"],function(e){var r,i,s;return r={Base:e("models/base")},i=function(e){function r(){return s=r.__super__.constructor.apply(this,arguments),s}return n(r,e),r.prototype.defaults=function(){return{term:"*",caseSensitive:!1,fuzzy:!1,title:"Text search",name:"text_search"}},r.prototype.queryData=function(){var e;return e=t.extend({},this.attributes),delete e.name,delete e.title,e},r}(r.Base)})}.call(this),function(){var e={}.hasOwnProperty,n=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};s("views/search",["require","config","models/search","views/facets/main","tpls"],function(e){var r,i,s,o,u,a;return o=e("config"),r={Search:e("models/search")},s={Facet:e("views/facets/main")},u=e("tpls"),i=function(e){function i(){return a=i.__super__.constructor.apply(this,arguments),a}return n(i,e),i.prototype.className="facet search",i.prototype.initialize=function(e){var t=this;return i.__super__.initialize.apply(this,arguments),this.model=new r.Search(o.textSearchOptions),this.listenTo(this.model,"change",function(){return t.trigger("change",t.model.queryData())}),this.render()},i.prototype.render=function(){var e,t;return i.__super__.render.apply(this,arguments),t=u["faceted-search/facets/search.menu"]({model:this.model}),e=u["faceted-search/facets/search.body"]({model:this.model}),this.$(".options").html(t),this.$(".body").html(e),this},i.prototype.events=function(){return t.extend({},i.__super__.events.apply(this,arguments),{"click button":function(e){return e.preventDefault()},"click button.active":"search","keyup input":"activateSearchButton",'change input[type="checkbox"]':"checkboxChanged"})},i.prototype.checkboxChanged=function(e){var t,n,r,i,s,o;if(t=e.currentTarget.getAttribute("data-attr"))this.model.set(t,e.currentTarget.checked);else if(t=e.currentTarget.getAttribute("data-attr-array")){r=[],o=this.el.querySelectorAll('[data-attr-array="'+t+'"]');for(i=0,s=o.length;i<s;i++)n=o[i],n.checked&&r.push(n.getAttribute("data-value"));this.model.set(t,r)}return this.activateSearchButton(!0)},i.prototype.activateSearchButton=function(e){var t;return e==null&&(e=!1),e.hasOwnProperty("target")&&(e=!1),t=this.el.querySelector('input[name="search"]').value,t.length>1&&(this.model.get("term")!==t||e)?this.$("button").addClass("active"):this.$("button").removeClass("active")},i.prototype.search=function(e){var t,n;return e.preventDefault(),this.$("button").removeClass("active"),t=this.$('input[name="search"]'),t.addClass("loading"),n=this.el.querySelector('input[name="search"]').value,this.model.set("term",n)},i.prototype.update=function(){return this.$('input[name="search"]').removeClass("loading")},i.prototype.reset=function(){return this.render()},i}(s.Facet)})}.call(this),function(){var e={}.hasOwnProperty,r=function(t,n){function i(){this.constructor=t}for(var r in n)e.call(n,r)&&(t[r]=n[r]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};i.config({baseUrl:"compiled/js",paths:{tpls:"../templates",jade:"../lib/jade/runtime",hilib:"../lib/hilib/compiled"}}),s("main",["require","hilib/functions/general","hilib/functions/dom","hilib/mixins/pubsub","config","facetviewmap","models/main","views/base","views/search","views/facets/list","views/facets/boolean","views/facets/date","tpls"],function(i){var s,o,u,a,f,l,c,h,p,d;return o=i("hilib/functions/general"),l=i("hilib/functions/dom"),h=i("hilib/mixins/pubsub"),f=i("config"),c=i("facetviewmap"),u={FacetedSearch:i("models/main")},a={Base:i("views/base"),TextSearch:i("views/search"),Facets:{List:i("views/facets/list"),Boolean:i("views/facets/boolean"),Date:i("views/facets/date")}},p=i("tpls"),s=function(n){function i(){return d=i.__super__.constructor.apply(this,arguments),d}return r(i,n),i.prototype.initialize=function(e){var n,r=this;return this.facetViews={},t.extend(this,h),t.extend(c,e.facetViewMap),delete e.facetViewMap,t.extend(f.facetNameMap,e.facetNameMap),delete e.facetNameMap,t.extend(f,e),n=t.extend(f.queryOptions,f.textSearchOptions),this.render(),this.subscribe("change:results",function(e){return r.renderFacets(),r.trigger("results:change",e)}),this.subscribe("change:cursor",function(e){return r.trigger("results:change",e)}),this.subscribe("change:page",function(e,t){return r.trigger("results:change",e,t)}),this.model=new u.FacetedSearch(n),this.listenTo(this.model.searchResults,"request",function(){var e,t,n,i,s;return n=r.el.querySelector(".faceted-search"),t=r.el.querySelector(".overlay"),t.style.width=n.clientWidth+"px",t.style.height=n.clientHeight+"px",t.style.display="block",i=r.el.querySelector(".overlay img"),e=l(n).boundingBox(),i.style.left=e.left+e.width/2+"px",s=e.height>document.documentElement.clientHeight?"50vh":e.height/2+"px",i.style.top=s}),this.listenTo(this.model.searchResults,"sync",function(){var e;return e=r.el.querySelector(".overlay"),e.style.display="none"})},i.prototype.render=function(){var e,t,n=this;return e=p["faceted-search/main"](),this.$el.html(e),this.$(".loader").fadeIn("slow"),f.search&&(t=new a.TextSearch,this.$(".search-placeholder").html(t.$el),this.listenTo(t,"change",function(e){return n.model.set(e)}),this.facetViews.textSearch=t),this},i.prototype.renderFacets=function(t){var n,r,i,s,o,u=this;this.$(".loader").hide();if(this.model.searchResults.length===1){i=document.createDocumentFragment(),o=this.model.searchResults.current.get("facets");for(s in o){if(!e.call(o,s))continue;r=o[s],r.type in c?(n=c[r.type],this.facetViews[r.name]=new n({attrs:r}),this.listenTo(this.facetViews[r.name],"change",function(e){return u.model.set(e)}),i.appendChild(this.facetViews[r.name].el)):console.error("Unknown facetView",r.type)}return this.el.querySelector(".facets").appendChild(i)}return this.update()},i.prototype.page=function(e,t){return this.model.searchResults.current.page(e,t)},i.prototype.next=function(){return this.model.searchResults.moveCursor("_next")},i.prototype.prev=function(){return this.model.searchResults.moveCursor("_prev")},i.prototype.hasNext=function(){return this.model.searchResults.current.has("_next")},i.prototype.hasPrev=function(){return this.model.searchResults.current.has("_prev")},i.prototype.update=function(){var t,n,r,i;this.facetViews.hasOwnProperty("textSearch")&&this.facetViews.textSearch.update(),r=this.model.searchResults.current.get("facets"),i=[];for(n in r){if(!e.call(r,n))continue;t=r[n],t.name==="textSearch"&&console.log("ALSO HERE 1"),i.push(this.facetViews[t.name].update(t.options))}return i},i.prototype.reset=function(){var t,n,r;this.facetViews.hasOwnProperty("textSearch")&&this.facetViews.textSearch.reset(),r=this.model.searchResults.last().get("facets");for(n in r){if(!e.call(r,n))continue;t=r[n],t.name==="textSearch"&&console.log("ALSO HERE 2"),this.facetViews[t.name].reset&&this.facetViews[t.name].reset()}return this.model.reset()},i}(n.View)})}.call(this),s("jquery",function(){return e}),s("underscore",function(){return t}),s("backbone",function(){return n}),i("main")});
>>>>>>> rembench2
